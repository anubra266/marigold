(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9129],{5059:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/concepts/css-in-js",function(){return n(4538)}])},4538:function(e,s,n){"use strict";n.r(s),n.d(s,{__N_SSG:function(){return r},title:function(){return o}});var i=n(5250),t=n(8570),r=!0;let o="CSS-in-JS";function a(e){let s=Object.assign({h2:"h2",a:"a",p:"p",h3:"h3",strong:"strong",code:"code",ul:"ul",li:"li"},(0,t.ah)(),e.components),{Toc:n}=s;return n||function(e,s){throw Error("Expected "+(s?"component":"object")+" `Toc` to be defined: you likely forgot to import, pass, or provide it.")}(0,!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n,{selector:"#toc",items:'[{"anchor":"#whats-css-in-js","title":"What\'s CSS-in-JS?"},{"anchor":"#why-do-we-use-css-in-js","title":"Why do we use CSS-in-JS?"},{"anchor":"#scoped-css","title":"Scoped CSS"},{"anchor":"#no-inline-styles","title":"No inline styles"},{"anchor":"#server-side-rendering","title":"Server-Side-Rendering"},{"anchor":"#the-classname-property","title":"The className property"},{"anchor":"#what-is-css-in-js-not","title":"What is CSS-in-JS not?"}]'}),"\n",(0,i.jsx)(s.h2,{id:"whats-css-in-js",children:(0,i.jsx)(s.a,{href:"#whats-css-in-js",children:"What's CSS-in-JS?"})}),"\n",(0,i.jsxs)(s.p,{children:["CSS-in-JS follows the principle of putting your CSS styles directly into your components instead of stylesheets.\nYou can write CSS in JavaScript syntax and take full advantage of the JS ecosystem.\nMarigold uses the CSS-in-JS library called ",(0,i.jsx)(s.a,{href:"https://emotion.sh/docs/introduction",children:"Emotion"}),".\nCSS-in-JS is actually a JavaScript library that bundles every JavaScript component with all associated CSS rules and dependencies."]}),"\n",(0,i.jsx)(s.h2,{id:"why-do-we-use-css-in-js",children:(0,i.jsx)(s.a,{href:"#why-do-we-use-css-in-js",children:"Why do we use CSS-in-JS?"})}),"\n",(0,i.jsx)(s.h3,{id:"scoped-css",children:(0,i.jsx)(s.a,{href:"#scoped-css",children:"Scoped CSS"})}),"\n",(0,i.jsx)(s.p,{children:"All CSS-in-JS libraries automatically generate unique names for CSS classes.\nStyles applied in Marigold components are applied only to that component.\nStyling outside the component is completely unaffected.\nThis prevents CSS classnames from colliding and reduces the effort required to find a suitable classname."}),"\n",(0,i.jsx)(s.h3,{id:"no-inline-styles",children:(0,i.jsx)(s.a,{href:"#no-inline-styles",children:"No inline styles"})}),"\n",(0,i.jsxs)(s.p,{children:["With CSS-in-JS, no styles are assigned within the HTML. We do ",(0,i.jsx)(s.strong,{children:"not"})," use style props like ",(0,i.jsx)(s.code,{children:"<div style={{ padding: '8px' }}>"}),".\nThis gives us the following advantages: Responsive designs, which are not possible with inline styles, can be used with CSS-in-JS.\nAlso, pseudo-classes, pseudo-elements and media queries can be used.\nIn addition, inline styles are generally considered less performant than classnames."]}),"\n",(0,i.jsx)(s.h3,{id:"server-side-rendering",children:(0,i.jsx)(s.a,{href:"#server-side-rendering",children:"Server-Side-Rendering"})}),"\n",(0,i.jsxs)(s.p,{children:["The Marigold Design System is created using ",(0,i.jsx)(s.a,{href:"https://www.gatsbyjs.com/",children:"Gatsby"})," and supports SSR.\nDuring SSR, only the styles required to render the initial view are added to the HTML document. Dynamic styles are removed to reduce the amount of code.\nThis has a positive impact on performance, since no separate CSS file needs to be retrieved from the server to block the rendering process."]}),"\n",(0,i.jsx)(s.h3,{id:"the-classname-property",children:(0,i.jsx)(s.a,{href:"#the-classname-property",children:"The className property"})}),"\n",(0,i.jsxs)(s.p,{children:["Marigold theme styles are applied with a classname. Emotion outputs the classnames as a string, which can then be assigned to HTML elements like this:\n",(0,i.jsx)(s.code,{children:"<button class='css-ase7ea css-1nt0tt7'>"}),".\nThe principle is to first define styles and then apply them to the component that is to be styled."]}),"\n",(0,i.jsx)(s.h2,{id:"what-is-css-in-js-not",children:(0,i.jsx)(s.a,{href:"#what-is-css-in-js-not",children:"What is CSS-in-JS not?"})}),"\n",(0,i.jsx)(s.p,{children:"CSS-in-JS does not obviate the need to understand the following:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"How styles are applied to the DOM"}),"\n",(0,i.jsx)(s.li,{children:"How inheritance works"}),"\n",(0,i.jsx)(s.li,{children:"How CSS properties work"}),"\n",(0,i.jsx)(s.li,{children:"How CSS layout works"}),"\n"]})]})}s.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,t.ah)(),e.components);return s?(0,i.jsx)(s,Object.assign({},e,{children:(0,i.jsx)(a,e)})):a(e)}}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=5059)}),_N_E=e.O()}]);