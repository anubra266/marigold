(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5603],{3596:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/introduction/theming",function(){return t(6078)}])},6078:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return a},title:function(){return r}});var o=t(5250),s=t(8570),i=t(6933),a=!0;let r="Theming";function h(e){let n=Object.assign({p:"p",a:"a",code:"code",h2:"h2",ul:"ul",li:"li",strong:"strong",pre:"pre",h6:"h6"},(0,s.ah)(),e.components),{Toc:t,Preview:a}=n;return a||l("Preview",!0),t||l("Toc",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t,{selector:"#toc",items:'[{"anchor":"#use-an-existing-theme","title":"Use an existing theme"},{"anchor":"#extend-an-existing-theme","title":"Extend an existing theme"}]'}),"\n","\n",(0,o.jsx)(n.p,{children:"Themes are used to define the visual appearance of the application and adhere the coporate identity."}),"\n",(0,o.jsxs)(n.p,{children:["In Marigold a theme is a plain object that defines ",(0,o.jsx)(n.a,{href:"https://www.lightningdesignsystem.com/design-tokens/",children:"design tokens"})," for the context in which it should be used (e.g. B2B or B2C), including a color palette, the typography, scales for white space and size related values. A theme also comes with styles for the app's components."]}),"\n",(0,o.jsxs)(n.p,{children:["Marigold's themes are based on the ",(0,o.jsx)(n.a,{href:"https://theme-ui.com/theme-spec/",children:"Theme UI's Theme Specification"})," with the addition of styles for all components (",(0,o.jsx)(n.code,{children:"theme.components.<component name>"}),")."]}),"\n",(0,o.jsx)(n.h2,{id:"use-an-existing-theme",children:(0,o.jsx)(n.a,{href:"#use-an-existing-theme",children:"Use an existing theme"})}),"\n",(0,o.jsx)(n.p,{children:"The following themes are currently available:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"B2B"}),": The default theme for B2B software."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Core"}),": The theme for applications that life inside the Reservix CORE application."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"To install a theme you can use the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"    yarn add @marigold/theme-<lowercease theme name>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Afterwards pass the ",(0,o.jsx)(n.code,{children:"theme"})," to the ",(0,o.jsx)(n.code,{children:"<MarigoldProvider>"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { MarigoldProvider } from '@marigold/components';\nimport theme from '@marigold/theme-b2b';\n\nconst App = () => (\n  <MarigoldProvider theme={theme}>{/* App code goes here */}</MarigoldProvider>\n);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Most themes are also using custom fonts. How you do make them available for your users depends on your setup (",(0,o.jsx)(n.a,{href:"https://create-react-app.dev/",children:"CRA"}),", ",(0,o.jsx)(n.a,{href:"https://nextjs.org/",children:(0,o.jsx)(n.code,{children:"next.js"})}),", ...)."]}),"\n",(0,o.jsxs)(n.p,{children:["The URL to load the fonts can be imported via the respective theme package. The following examples shows how to load fonts in a ",(0,o.jsx)(n.code,{children:"next.js"})," app. This also supports the ",(0,o.jsx)(n.a,{href:"https://nextjs.org/docs/basic-features/font-optimization",children:"font optimization"})," feature of ",(0,o.jsx)(n.code,{children:"next.js"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// pages/_document.js\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport { webFontUrl } from '@marigold/theme-b2b';\n\nclass MyDocument extends Document {\n  render() {\n    return (\n      <Html>\n        <Head>\n          {webFontUrl.map(url => (\n            <link key={url} rel=\"stylesheet\" href={url} />\n          ))}\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In other setup you might need to use ",(0,o.jsx)(n.a,{href:"https://github.com/nfl/react-helmet",children:(0,o.jsx)(n.code,{children:"react-helmet"})})," or can paste the fonts directly into the ",(0,o.jsx)(n.code,{children:"<head>"})," of your HTML."]}),"\n",(0,o.jsx)(n.h2,{id:"extend-an-existing-theme",children:(0,o.jsx)(n.a,{href:"#extend-an-existing-theme",children:"Extend an existing theme"})}),"\n",(0,o.jsxs)(n.p,{children:["Usually using one of the existing themes should be sufficient to build and style an application. But every now and then your app might need a variant that is not included in the theme or it is necessary to adjust existing variants and styles a bit. This is especially useful when designers want to ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/A/B_testing",children:"A/B test"})," designs and user flows or if a certain domain logic requires a more individual solution."]}),"\n",(0,o.jsxs)(n.p,{children:["Let's image you need a very flashy call to action button for your app, but the default theme for B2B applications does not have such a button. In order to customize the theme and add a CTA button you can extend the theme with customized styles using the ",(0,o.jsx)(n.code,{children:"extendsTheme"})," helper like shown below:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { extendTheme } from '@marigold/components';\nimport theme from '@marigold/theme-b2b';\n\nconst customTheme = extendTheme(theme, {\n  fonts: {\n    system: 'system-ui, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif',\n  },\n  components: {\n    Button: {\n      variant: {\n        cta: {\n          // You can still use all the tokens from the theme extended theme\n          color: 'gray00',\n          fontSize: 'xsmall',\n          borderRadius: 'large',\n          // You can also use tokens defined in the theme extension\n          fontFamily: 'system',\n          // And if you really want to, even use hard coded values\n          background:\n            'linear-gradient(319deg, #663dff 0%, #aa00ff 37%, #cc4499 100%)',\n          textTransform: 'uppercase',\n          fontWeight: 600,\n          transition: 'transform 0.25s cubic-bezier(.5, -.1, .1, 1.5)',\n\n          '&:hover': {\n            transform: 'scale(1.5)',\n          },\n\n          '&:active': {\n            transform: 'scale(1.6)',\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const App = () => (\n  <MarigoldProvider theme={customTheme}>\n    {/** your app code */}\n  </MarigoldProvider>\n);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Afterwards you can use the added variant like you would do with any other variant from the theme. ",(0,o.jsx)(n.code,{children:'<Button variant="cta">Buy now</Button>'})," will render our custom CTA button:"]}),"\n",(0,o.jsx)(a,{children:(0,o.jsx)(i.g,{})}),"\n",(0,o.jsxs)(n.p,{children:["Of course you can do this not only with the ",(0,o.jsx)(n.code,{children:"Button"}),", but with any of Marigold's components. Styles for every component can be found under ",(0,o.jsx)(n.code,{children:"theme.components.<component name>"})," and follows the following structure:"]}),"\n",(0,o.jsx)(n.h6,{id:"extend-styles-for-a-component",children:(0,o.jsx)(n.a,{href:"#extend-styles-for-a-component",children:"Extend Styles for a Component"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import type { Theme } from '@marigold/components';\n\nconst theme: Theme = {\n  components: {\n    // Component name\n    Button: {\n      base: {\n        /**\n         * Styles that are always applied\n         */\n      },\n      variant: {\n        'variant-name': {\n          /**\n           * Styles that are applied when the `variant`\n           * prop is set to the key\n           */\n        },\n      },\n      size: {\n        'size-name': {\n          /**\n           * Styles that are applied when the `size`\n           * prop is set to the key\n           */\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,o.jsx)(n.h6,{id:"extend-styles-for-a-component-with-parts",children:(0,o.jsx)(n.a,{href:"#extend-styles-for-a-component-with-parts",children:"Extend Styles for a Component with Parts"})}),"\n",(0,o.jsxs)(n.p,{children:["Styles of more complex components, like the ",(0,o.jsx)(n.code,{children:"<Dialog>"}),", have their styles split into parts."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import type { Theme } from '@marigold/components';\n\nconst theme: Theme = {\n  components: {\n    // Component name\n    Dialog: {\n      base: {\n        container: {\n          /**\n           * Styles that are always applied to the dialog container\n           */\n        },\n        closeButton: {\n          /**\n           * Styles that are always applied to the close button\n           */\n        },\n      },\n      variant: {\n        'variant-name': {\n          container: {\n            /**\n             * Styles that are applied to the container when\n             * the `variant` prop is set to the key\n             */\n          },\n          closeButton: {\n            /**\n             * Styles that are applied to the close button when\n             * the `variant` prop is set to the key\n             */\n          },\n        },\n      },\n      size: {\n        'size-name': {\n          container: {\n            /**\n             * Styles that are applied to the container when\n             * the `size` prop is set to the key\n             */\n          },\n          closeButton: {\n            /**\n             * Styles that are applied to the close button when\n             * the `size` prop is set to the key\n             */\n          },\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"We recommend to use TypeScript for the styles so that you don't accidentially have a typo in a name or variant:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import type { Theme } from '@marigold/components';\n\nexport const Dialog: Theme['components']['Dialog'] = {\n  // styles\n};\n"})})]})}function l(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(h,e)})):h(e)}}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=3596)}),_N_E=e.O()}]);