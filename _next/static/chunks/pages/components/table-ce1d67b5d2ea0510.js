(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7807],{3176:function(e,l,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/table",function(){return n(4801)}])},4801:function(e,l,n){"use strict";n.r(l),n.d(l,{__N_SSG:function(){return t},title:function(){return r}});var a=n(5250),o=n(7160),t=!0,r="Table";function s(e){var l=Object.assign({p:"p",code:"code",h2:"h2",a:"a",h3:"h3",pre:"pre"},(0,o.ah)(),e.components),n=l.Toc,t=l.Preview,s=l.BasicTable,b=l.AppearanceTable,c=l.PropsTable,T=l.SimpleCompactTable,d=l.SingleModeTable,h=l.MultiModeTable,m=l.DynamicTable,C=l.DisabledTable,p=l.SortedTable,u=l.AsyncTable,y=l.NestedTable;return b||i("AppearanceTable",!0),u||i("AsyncTable",!0),s||i("BasicTable",!0),C||i("DisabledTable",!0),m||i("DynamicTable",!0),h||i("MultiModeTable",!0),y||i("NestedTable",!0),t||i("Preview",!0),c||i("PropsTable",!0),T||i("SimpleCompactTable",!0),d||i("SingleModeTable",!0),p||i("SortedTable",!0),n||i("Toc",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n,{selector:"#toc",items:'[{"anchor":"#usage","title":"Usage"},{"anchor":"#import","title":"Import"},{"anchor":"#appearance","title":"Appearance"},{"anchor":"#props","title":"Props"},{"anchor":"#examples","title":"Examples"},{"anchor":"#compact-variant","title":"Compact variant"},{"anchor":"#selection-mode-single","title":"Selection mode single"},{"anchor":"#selection-mode-multiple","title":"Selection mode multiple"},{"anchor":"#dynamic-collections","title":"Dynamic collections"},{"anchor":"#disabled-rows","title":"Disabled Rows"},{"anchor":"#sorting","title":"Sorting"},{"anchor":"#async-sorting","title":"Async sorting"},{"anchor":"#nested-columns","title":"Nested Columns"}]'}),"\n",(0,a.jsxs)(l.p,{children:["The ",(0,a.jsx)(l.code,{children:"<Table>"})," component allows to present data in a table format. It enhances the functionality of regular ",(0,a.jsx)(l.code,{children:"<table>"})," elements with the possibility to interact and select the data, as well as, helps with accessibility by providing keyboard navigation."]}),"\n",(0,a.jsxs)(l.p,{children:["You can sort with the ",(0,a.jsx)(l.code,{children:"<Table>"})," and add a ",(0,a.jsx)(l.code,{children:"selectionMode"})," property with which you have the possibility to select entire rows."]}),"\n",(0,a.jsxs)(l.p,{children:["The component is divided into several parts. So there are the ",(0,a.jsx)(l.code,{children:"<Table.Header>"}),", ",(0,a.jsx)(l.code,{children:"<Table.Body>"}),", ",(0,a.jsx)(l.code,{children:"<Table.Column>"}),", ",(0,a.jsx)(l.code,{children:"<Table.Row>"})," and ",(0,a.jsx)(l.code,{children:"<Table.Cell>"}),"."]}),"\n",(0,a.jsx)(t,{children:(0,a.jsx)(s,{})}),"\n",(0,a.jsx)(l.h2,{id:"usage",children:(0,a.jsx)(l.a,{href:"#usage",children:"Usage"})}),"\n",(0,a.jsx)(l.h3,{id:"import",children:(0,a.jsx)(l.a,{href:"#import",children:"Import"})}),"\n",(0,a.jsx)(l.p,{children:"To import the component you just have to use this code below."}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:"import { Table } from '@marigold/components';\n"})}),"\n",(0,a.jsx)(l.h3,{id:"appearance",children:(0,a.jsx)(l.a,{href:"#appearance",children:"Appearance"})}),"\n",(0,a.jsx)(b,{component:r}),"\n",(0,a.jsx)(l.h3,{id:"props",children:(0,a.jsx)(l.a,{href:"#props",children:"Props"})}),"\n",(0,a.jsx)(c,{props:[{property:"selectionMode",type:"none, single, multiple",description:"The type of selection that is allowed in the collection.",default:"none"},{property:"onSelectionChange",type:"(keys: Selection) => any",description:"Handler that is called when the selection changes.",default:"none"},{property:"stretch",type:"boolean",description:"Stretch table to fill the container.",default:"false"},{property:"disabledKeys",type:"Object",description:"Disabled the selected row.",default:"none"},{property:"sortDescriptor",type:"Object",description:"The current sorted column and direction.",default:"none"},{property:"onSortChange",type:"function",description:"Handler that is called when the sort direction changes.",default:"none"}]}),"\n",(0,a.jsx)(l.h2,{id:"examples",children:(0,a.jsx)(l.a,{href:"#examples",children:"Examples"})}),"\n",(0,a.jsx)(l.h3,{id:"compact-variant",children:(0,a.jsx)(l.a,{href:"#compact-variant",children:"Compact variant"})}),"\n",(0,a.jsxs)(l.p,{children:["In this example you can see the variant ",(0,a.jsx)(l.code,{children:"compact"})," from the theme b2b. It reduces the cell spacing. There is also another variant, which is called ",(0,a.jsx)(l.code,{children:"expaned"}),", which enlarges the cells.\nThe ",(0,a.jsx)(l.code,{children:"core-Theme"})," has also two variants called ",(0,a.jsx)(l.code,{children:"tableLines"})," and ",(0,a.jsx)(l.code,{children:"tableBorder"}),"."]}),"\n",(0,a.jsx)(t,{children:(0,a.jsx)(T,{})}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:'import { Table } from \'@marigold/components\';\n\nexport const SimpleCompactTable = () => (\n  <Table\n    aria-label="Table with multiple selection"\n    selectionMode="multiple"\n    variant="compact"\n  >\n    <Table.Header>\n      <Table.Column>Name</Table.Column>\n      <Table.Column>Firstname</Table.Column>\n      <Table.Column>House</Table.Column>\n      <Table.Column>Year of birth</Table.Column>\n    </Table.Header>\n    <Table.Body>\n      <Table.Row key={1}>\n        <Table.Cell>Potter</Table.Cell>\n        <Table.Cell>Harry</Table.Cell>\n        <Table.Cell>Gryffindor</Table.Cell>\n        <Table.Cell>1980</Table.Cell>\n      </Table.Row>\n      <Table.Row key={2}>\n        <Table.Cell>Malfoy</Table.Cell>\n        <Table.Cell>Draco</Table.Cell>\n        <Table.Cell>Slytherin</Table.Cell>\n        <Table.Cell>1980</Table.Cell>\n      </Table.Row>\n      <Table.Row key={3}>\n        <Table.Cell>Diggory</Table.Cell>\n        <Table.Cell>Cedric</Table.Cell>\n        <Table.Cell>Hufflepuff</Table.Cell>\n        <Table.Cell>1977</Table.Cell>\n      </Table.Row>\n      <Table.Row key={4}>\n        <Table.Cell>Lovegood</Table.Cell>\n        <Table.Cell>Luna</Table.Cell>\n        <Table.Cell>Ravenclaw</Table.Cell>\n        <Table.Cell>1981</Table.Cell>\n      </Table.Row>\n    </Table.Body>\n  </Table>\n);\n'})}),"\n",(0,a.jsx)(l.h3,{id:"selection-mode-single",children:(0,a.jsx)(l.a,{href:"#selection-mode-single",children:"Selection mode single"})}),"\n",(0,a.jsxs)(l.p,{children:["If you have set the ",(0,a.jsx)(l.code,{children:"selectionMode"})," to single, then you just can select only one row of the table."]}),"\n",(0,a.jsx)(t,{children:(0,a.jsx)(d,{})}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:'import { Table } from \'@marigold/components\';\n\nexport const SingleModeTable = () => (\n  <Table aria-label="Table with multiple selection" selectionMode="single">\n    <Table.Header>\n      <Table.Column>Name</Table.Column>\n      <Table.Column>Firstname</Table.Column>\n      <Table.Column>House</Table.Column>\n      <Table.Column>Year of birth</Table.Column>\n    </Table.Header>\n    <Table.Body>\n      <Table.Row key={1}>\n        <Table.Cell>Potter</Table.Cell>\n        <Table.Cell>Harry</Table.Cell>\n        <Table.Cell>Gryffindor</Table.Cell>\n        <Table.Cell>1980</Table.Cell>\n      </Table.Row>\n      <Table.Row key={2}>\n        <Table.Cell>Malfoy</Table.Cell>\n        <Table.Cell>Draco</Table.Cell>\n        <Table.Cell>Slytherin</Table.Cell>\n        <Table.Cell>1980</Table.Cell>\n      </Table.Row>\n      <Table.Row key={3}>\n        <Table.Cell>Diggory</Table.Cell>\n        <Table.Cell>Cedric</Table.Cell>\n        <Table.Cell>Hufflepuff</Table.Cell>\n        <Table.Cell>1977</Table.Cell>\n      </Table.Row>\n      <Table.Row key={4}>\n        <Table.Cell>Lovegood</Table.Cell>\n        <Table.Cell>Luna</Table.Cell>\n        <Table.Cell>Ravenclaw</Table.Cell>\n        <Table.Cell>1981</Table.Cell>\n      </Table.Row>\n    </Table.Body>\n  </Table>\n);\n'})}),"\n",(0,a.jsx)(l.h3,{id:"selection-mode-multiple",children:(0,a.jsx)(l.a,{href:"#selection-mode-multiple",children:"Selection mode multiple"})}),"\n",(0,a.jsxs)(l.p,{children:["This example shows how to use the ",(0,a.jsx)(l.code,{children:"selectionMode"}),", but with the setting that multiple checkboxes appear and you can select as many lines as you want."]}),"\n",(0,a.jsx)(t,{children:(0,a.jsx)(h,{})}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:'import { Table } from \'@marigold/components\';\n\nexport const MultiModeTable = () => (\n  <Table aria-label="Table with multiple selection" selectionMode="multiple">\n    <Table.Header>\n      <Table.Column>Name</Table.Column>\n      <Table.Column>Firstname</Table.Column>\n      <Table.Column>House</Table.Column>\n      <Table.Column>Year of birth</Table.Column>\n    </Table.Header>\n    <Table.Body>\n      <Table.Row>\n        <Table.Cell>Potter</Table.Cell>\n        <Table.Cell>Harry</Table.Cell>\n        <Table.Cell>Gryffindor</Table.Cell>\n        <Table.Cell>1980</Table.Cell>\n      </Table.Row>\n      <Table.Row>\n        <Table.Cell>Malfoy</Table.Cell>\n        <Table.Cell>Draco</Table.Cell>\n        <Table.Cell>Slytherin</Table.Cell>\n        <Table.Cell>1980</Table.Cell>\n      </Table.Row>\n      <Table.Row>\n        <Table.Cell>Diggory</Table.Cell>\n        <Table.Cell>Cedric</Table.Cell>\n        <Table.Cell>Hufflepuff</Table.Cell>\n        <Table.Cell>1977</Table.Cell>\n      </Table.Row>\n      <Table.Row>\n        <Table.Cell>Lovegood</Table.Cell>\n        <Table.Cell>Luna</Table.Cell>\n        <Table.Cell>Ravenclaw</Table.Cell>\n        <Table.Cell>1981</Table.Cell>\n      </Table.Row>\n    </Table.Body>\n  </Table>\n);\n'})}),"\n",(0,a.jsx)(l.h3,{id:"dynamic-collections",children:(0,a.jsx)(l.a,{href:"#dynamic-collections",children:"Dynamic collections"})}),"\n",(0,a.jsx)(l.p,{children:"You don't have to hard code the table items, you could also create a dynamic collection and iterate through it. That's what the example shows."}),"\n",(0,a.jsx)(t,{children:(0,a.jsx)(m,{})}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:"import { Table } from '@marigold/components';\nimport React from 'react';\n\nexport const DynamicTable = () => {\n  const columns = [\n    { name: 'Name', key: 'name' },\n    { name: 'Firstname', key: 'firstname' },\n    { name: 'House', key: 'house' },\n    { name: 'Year of birth', key: 'year' },\n  ];\n\n  const rows: { [key: string]: string }[] = [\n    {\n      id: '1',\n      name: 'Potter',\n      firstname: 'Harry',\n      house: 'Gryffindor',\n      year: '1980',\n    },\n    {\n      id: '2',\n      name: 'Malfoy',\n      firstname: 'Draco',\n      house: 'Slytherin',\n      year: '1980',\n    },\n    {\n      id: '3',\n      name: 'Diggory',\n      firstname: 'Cedric',\n      house: 'Hufflepuff',\n      year: '1977',\n    },\n    {\n      id: '4',\n      name: 'Lovegood',\n      firstname: 'Luna',\n      house: 'Ravenclaw',\n      year: '1981',\n    },\n  ];\n  const [selectedKeys, setSelectedKeys] = React.useState(new Set());\n  const selected = Array.from(selectedKeys);\n  return (\n    <>\n      <Table\n        aria-label=\"Example dynamic collection table\"\n        selectionMode=\"multiple\"\n        onSelectionChange={key => setSelectedKeys(new Set(key))}\n      >\n        <Table.Header columns={columns}>\n          {column => <Table.Column>{column.name}</Table.Column>}\n        </Table.Header>\n        <Table.Body items={rows}>\n          {item => (\n            <Table.Row>\n              {columnKey => <Table.Cell>{item[columnKey]}</Table.Cell>}\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n      <div>Selected rows: {selected.join(', ')}</div>\n    </>\n  );\n};\n"})}),"\n",(0,a.jsx)(l.h3,{id:"disabled-rows",children:(0,a.jsx)(l.a,{href:"#disabled-rows",children:"Disabled Rows"})}),"\n",(0,a.jsxs)(l.p,{children:["You can also disable certain rows. For that all you have to do is add the property ",(0,a.jsx)(l.code,{children:"disabledKeys"})," with the certain key to the table."]}),"\n",(0,a.jsx)(t,{children:(0,a.jsx)(C,{})}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:'import { Table } from \'@marigold/components\';\n\nexport const DisabledTable = () => (\n  <Table\n    aria-label="Table with multiple selection"\n    selectionMode="multiple"\n    disabledKeys={[\'Malfoy\']}\n  >\n    <Table.Header>\n      <Table.Column>Name</Table.Column>\n      <Table.Column>Firstname</Table.Column>\n      <Table.Column>House</Table.Column>\n      <Table.Column>Year of birth</Table.Column>\n    </Table.Header>\n    <Table.Body>\n      <Table.Row key="Potter">\n        <Table.Cell>Potter</Table.Cell>\n        <Table.Cell>Harry</Table.Cell>\n        <Table.Cell>Gryffindor</Table.Cell>\n        <Table.Cell>1980</Table.Cell>\n      </Table.Row>\n      <Table.Row key="Malfoy">\n        <Table.Cell>Malfoy</Table.Cell>\n        <Table.Cell>Draco</Table.Cell>\n        <Table.Cell>Slytherin</Table.Cell>\n        <Table.Cell>1980</Table.Cell>\n      </Table.Row>\n      <Table.Row key="Diggory">\n        <Table.Cell>Diggory</Table.Cell>\n        <Table.Cell>Cedric</Table.Cell>\n        <Table.Cell>Hufflepuff</Table.Cell>\n        <Table.Cell>1977</Table.Cell>\n      </Table.Row>\n      <Table.Row key="Lovegood">\n        <Table.Cell>Lovegood</Table.Cell>\n        <Table.Cell>Luna</Table.Cell>\n        <Table.Cell>Ravenclaw</Table.Cell>\n        <Table.Cell>1981</Table.Cell>\n      </Table.Row>\n    </Table.Body>\n  </Table>\n);\n'})}),"\n",(0,a.jsx)(l.h3,{id:"sorting",children:(0,a.jsx)(l.a,{href:"#sorting",children:"Sorting"})}),"\n",(0,a.jsxs)(l.p,{children:["The options to sort are ascending or descending. For this purpose the properties (",(0,a.jsx)(l.code,{children:"onSortChange"}),", ",(0,a.jsx)(l.code,{children:"sortDescriptor"}),") for sorting must be specified."]}),"\n",(0,a.jsx)(t,{children:(0,a.jsx)(p,{})}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { SortDescriptor } from '@react-types/shared';\nimport { Table } from '@marigold/components';\n\nexport interface Data {\n  name: string;\n  height: string;\n  mass: string;\n  birth_year: string;\n}\n\nexport const SortedTable = () => {\n  const data: Data[] = [\n    {\n      name: 'Luke Skywalker',\n      height: '172',\n      mass: '77',\n      birth_year: '19BBY',\n    },\n    {\n      name: 'C-3PO',\n      height: '167',\n      mass: '75',\n      birth_year: '112BBY',\n    },\n    {\n      name: 'R2-D2',\n      height: '96',\n      mass: '32',\n      birth_year: '33BBY',\n    },\n    {\n      name: 'Darth Vader',\n      height: '202',\n      mass: '136',\n      birth_year: '41.9BBY',\n    },\n    {\n      name: 'Leia Organa',\n      height: '150',\n      mass: '49',\n      birth_year: '19BBY',\n    },\n    {\n      name: 'Owen Lars',\n      height: '178',\n      mass: '120',\n      birth_year: '52BBY',\n    },\n    {\n      name: 'Beru Whitesun lars',\n      height: '165',\n      mass: '75',\n      birth_year: '47BBY',\n    },\n    {\n      name: 'R5-D4',\n      height: '97',\n      mass: '32',\n      birth_year: 'unknown',\n    },\n    {\n      name: 'Biggs Darklighter',\n      height: '183',\n      mass: '84',\n      birth_year: '24BBY',\n    },\n    {\n      name: 'Obi-Wan Kenobi',\n      height: '182',\n      mass: '77',\n      birth_year: '57BBY',\n    },\n  ];\n  const [list, setList] = useState(data);\n  const [descriptor, setDescriptor] = useState<SortDescriptor>({});\n  const sort = ({ column, direction }: SortDescriptor) => {\n    const result = list.sort((a, b) => {\n      const first = a[column as keyof Data];\n      const second = b[column as keyof Data];\n      let cmp =\n        (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1;\n      if (direction === 'descending') {\n        cmp *= -1;\n      }\n      return cmp;\n    });\n    setDescriptor({ column, direction });\n    setList(result);\n  };\n\n  return (\n    <>\n      <Table\n        aria-label=\"Example table with client side sorting\"\n        sortDescriptor={descriptor}\n        onSortChange={sort}\n        selectionMode=\"multiple\"\n      >\n        <Table.Header>\n          <Table.Column key=\"name\" allowsSorting>\n            Name\n          </Table.Column>\n          <Table.Column key=\"height\" allowsSorting>\n            Height\n          </Table.Column>\n          <Table.Column key=\"mass\" allowsSorting>\n            Mass\n          </Table.Column>\n          <Table.Column key=\"birth_year\" allowsSorting>\n            Birth Year\n          </Table.Column>\n        </Table.Header>\n        <Table.Body items={list}>\n          {item => (\n            <Table.Row key={item.name}>\n              {columnKey => <Table.Cell>{(item as any)[columnKey]}</Table.Cell>}\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n      <br />\n      <pre>\n        Sort: {descriptor.column} / {descriptor.direction}\n      </pre>\n    </>\n  );\n};\n"})}),"\n",(0,a.jsx)(l.h3,{id:"async-sorting",children:(0,a.jsx)(l.a,{href:"#async-sorting",children:"Async sorting"})}),"\n",(0,a.jsxs)(l.p,{children:["In this example the ",(0,a.jsx)(l.code,{children:"<Table>"})," is also sortable but its build async. For that you must use the ",(0,a.jsx)(l.code,{children:"useAsyncList"})," hook. The hook manages the async list data and provides convenience methods for updating the data."]}),"\n",(0,a.jsx)(t,{children:(0,a.jsx)(u,{})}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:'import { Table, useAsyncList } from \'@marigold/components\';\n\nexport interface asyncData {\n  name: string;\n  height: string;\n  mass: string;\n  birth_year: string;\n}\n\nexport const AsyncTable = () => {\n  let list = useAsyncList<asyncData>({\n    async load({ signal }) {\n      let res = await fetch(`https://swapi.py4e.com/api/people/?search`, {\n        signal,\n      });\n      let json = await res.json();\n      return {\n        items: json.results,\n      };\n    },\n    async sort({ items, sortDescriptor }) {\n      return {\n        items: items.sort((a, b) => {\n          let first = a[sortDescriptor.column as keyof asyncData];\n          let second = b[sortDescriptor.column as keyof asyncData];\n          let cmp =\n            (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1;\n          if (sortDescriptor.direction === \'descending\') {\n            cmp *= -1;\n          }\n          return cmp;\n        }),\n      };\n    },\n  });\n\n  return (\n    <Table\n      aria-label="Example table with client side sorting"\n      sortDescriptor={list.sortDescriptor}\n      onSortChange={list.sort}\n    >\n      <Table.Header>\n        <Table.Column key="name" allowsSorting>\n          Name\n        </Table.Column>\n        <Table.Column key="height" allowsSorting>\n          Height\n        </Table.Column>\n        <Table.Column key="mass" allowsSorting>\n          Mass\n        </Table.Column>\n        <Table.Column key="birth_year" allowsSorting>\n          Birth Year\n        </Table.Column>\n      </Table.Header>\n      <Table.Body items={list.items}>\n        {item => (\n          <Table.Row key={(item as any).name}>\n            {columnKey => <Table.Cell>{(item as any)[columnKey]}</Table.Cell>}\n          </Table.Row>\n        )}\n      </Table.Body>\n    </Table>\n  );\n};\n'})}),"\n",(0,a.jsx)(l.h3,{id:"nested-columns",children:(0,a.jsx)(l.a,{href:"#nested-columns",children:"Nested Columns"})}),"\n",(0,a.jsxs)(l.p,{children:["Columns can be nested, which will result in more than one header row to be created. Note the usage of ",(0,a.jsx)(l.code,{children:"isRowHeader"})," in the example below. By default, only the first column is included in the accessibility name for each row."]}),"\n",(0,a.jsx)(t,{children:(0,a.jsx)(y,{})}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:'import { Table } from \'@marigold/components\';\n\nexport const NestedTable = () => (\n  <Table aria-label="Example table for nested columns">\n    <Table.Header>\n      <Table.Column title="Name">\n        <Table.Column isRowHeader>First Name</Table.Column>\n        <Table.Column isRowHeader>Last Name</Table.Column>\n      </Table.Column>\n      <Table.Column title="Information">\n        <Table.Column>Age</Table.Column>\n        <Table.Column>Birthday</Table.Column>\n      </Table.Column>\n    </Table.Header>\n    <Table.Body>\n      <Table.Row>\n        <Table.Cell>Sam</Table.Cell>\n        <Table.Cell>Smith</Table.Cell>\n        <Table.Cell>36</Table.Cell>\n        <Table.Cell>May 3</Table.Cell>\n      </Table.Row>\n      <Table.Row>\n        <Table.Cell>Julia</Table.Cell>\n        <Table.Cell>Jones</Table.Cell>\n        <Table.Cell>24</Table.Cell>\n        <Table.Cell>February 10</Table.Cell>\n      </Table.Row>\n      <Table.Row>\n        <Table.Cell>Peter</Table.Cell>\n        <Table.Cell>Parker</Table.Cell>\n        <Table.Cell>28</Table.Cell>\n        <Table.Cell>September 7</Table.Cell>\n      </Table.Row>\n      <Table.Row>\n        <Table.Cell>Bruce</Table.Cell>\n        <Table.Cell>Wayne</Table.Cell>\n        <Table.Cell>32</Table.Cell>\n        <Table.Cell>December 18</Table.Cell>\n      </Table.Row>\n    </Table.Body>\n  </Table>\n);\n'})})]})}function i(e,l){throw new Error("Expected "+(l?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}l.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},l=Object.assign({},(0,o.ah)(),e.components),n=l.wrapper;return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(s,e)})):s(e)}}},function(e){e.O(0,[9774,2888,179],(function(){return l=3176,e(e.s=l);var l}));var l=e.O();_N_E=l}]);