(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3392],{9035:function(e,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/dialog",function(){return o(2617)}])},2617:function(e,n,o){"use strict";o.r(n),o.d(n,{__N_SSG:function(){return r},title:function(){return a}});var t=o(5250),i=o(8570),r=!0,a="Dialog";function s(e){var n=Object.assign({p:"p",code:"code",h2:"h2",a:"a",h3:"h3",pre:"pre"},(0,i.ah)(),e.components),o=n.Toc,r=n.Preview,s=n.DialogDemo,c=n.AppearanceTable,d=n.PropsTable,p=n.DialogFormDemo,h=n.DialogDismiss,u=n.OpenDialogFromMenu;return c||l("AppearanceTable",!0),s||l("DialogDemo",!0),h||l("DialogDismiss",!0),p||l("DialogFormDemo",!0),u||l("OpenDialogFromMenu",!0),r||l("Preview",!0),d||l("PropsTable",!0),o||l("Toc",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o,{selector:"#toc",items:'[{"anchor":"#usage","title":"Usage"},{"anchor":"#import","title":"Import"},{"anchor":"#appearance","title":"Appearance"},{"anchor":"#props","title":"Props"},{"anchor":"#trigger-props","title":"Trigger props"},{"anchor":"#controller-props","title":"Controller props"},{"anchor":"#examples","title":"Examples"},{"anchor":"#form-dialog","title":"Form Dialog"},{"anchor":"#dismiss-dialog","title":"Dismiss Dialog"},{"anchor":"#dialog-opend-from-menu","title":"Dialog opend from Menu"}]'}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"<Dialog>"})," is a overlay component. This means it displays a modal as a reaction to an event. It appears in the middle of the display and blurs out the underlay."]}),"\n",(0,t.jsxs)(n.p,{children:["This component can be styled in different parts. It has as parts ",(0,t.jsx)(n.code,{children:"closeButton"})," and ",(0,t.jsx)(n.code,{children:"container"}),", which is the component itself, and these parts can be styled separately."]}),"\n",(0,t.jsxs)(n.p,{children:["A special thing is also that you can have props on the ",(0,t.jsx)(n.code,{children:"<Dialog.Trigger>"})," and on the ",(0,t.jsx)(n.code,{children:"<Dialog>"})," itself. The ",(0,t.jsx)(n.code,{children:"closeButton"})," is an optionally property with which you can close the ",(0,t.jsx)(n.code,{children:"<Dialog>"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"<Dialog.Controller>"})," should be used if you want to use the ",(0,t.jsx)(n.code,{children:"<Dialog>"})," without a trigger. For example if you want to open it within a ",(0,t.jsx)(n.code,{children:"<Menu>"}),"."]}),"\n",(0,t.jsx)(r,{children:(0,t.jsx)(s,{})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:(0,t.jsx)(n.a,{href:"#usage",children:"Usage"})}),"\n",(0,t.jsx)(n.h3,{id:"import",children:(0,t.jsx)(n.a,{href:"#import",children:"Import"})}),"\n",(0,t.jsx)(n.p,{children:"To import the component you just have to use this code below."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Dialog } from '@marigold/components';\n"})}),"\n",(0,t.jsx)(n.h3,{id:"appearance",children:(0,t.jsx)(n.a,{href:"#appearance",children:"Appearance"})}),"\n",(0,t.jsx)(c,{component:a}),"\n",(0,t.jsx)(n.h3,{id:"props",children:(0,t.jsx)(n.a,{href:"#props",children:"Props"})}),"\n",(0,t.jsx)(d,{props:[{property:"closeButton",type:"boolean",description:"Show the close button",default:"false"},{property:"children",type:"ReactNode",description:"Children of the component."}]}),"\n",(0,t.jsx)(n.h3,{id:"trigger-props",children:(0,t.jsx)(n.a,{href:"#trigger-props",children:"Trigger props"})}),"\n",(0,t.jsx)(d,{props:[{property:"dismissable",type:"boolean",description:"Whether to close the overlay when the user interacts outside it.",default:"true"},{property:"keyboardDismissable",type:"boolean",description:"Whether pressing the escape key to close the overlay should be disabled.",default:"true"},{property:"children",type:"ReactNode",description:"Children of the component."}]}),"\n",(0,t.jsx)(n.h3,{id:"controller-props",children:(0,t.jsx)(n.a,{href:"#controller-props",children:"Controller props"})}),"\n",(0,t.jsx)(d,{props:[{property:"open",type:"boolean",description:"Whether the overlay is open by default (controlled).",default:"false"},{property:"onOpenChange",type:"(isOpen: boolean) => void",description:"Handler that is called when the overlay's open state changes.",default:"none"},{property:"dismissable",type:"boolean",description:"Whether to close the overlay when the user interacts outside it.",default:"true"},{property:"keyboardDismissable",type:"boolean",description:"Whether pressing the escape key to close the overlay should be disabled.",default:"true"},{property:"children",type:"ReactNode",description:"Children of the component."}]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:(0,t.jsx)(n.a,{href:"#examples",children:"Examples"})}),"\n",(0,t.jsx)(n.h3,{id:"form-dialog",children:(0,t.jsx)(n.a,{href:"#form-dialog",children:"Form Dialog"})}),"\n",(0,t.jsxs)(n.p,{children:["The example shows how to use a ",(0,t.jsx)(n.code,{children:"<Dialog>"})," in a simple form context. You can see the ",(0,t.jsx)(n.code,{children:"closeButton"})," is not present by default, you have to click on the buttons or on the underlay to exit the dialog."]}),"\n",(0,t.jsx)(r,{children:(0,t.jsx)(p,{})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import {\n  Dialog,\n  Button,\n  Headline,\n  Stack,\n  TextField,\n  Inline,\n} from \'@marigold/components\';\n\nexport const DialogFormDemo = () => (\n  <Dialog.Trigger>\n    <Button variant="primary">Login</Button>\n    <Dialog>\n      {({ close }) => (\n        <>\n          <Headline level="2">Please log into account</Headline>\n          <Stack space="small">\n            <TextField label="Username" />\n            <TextField label="Password" type="password" />\n            <Inline space="medium">\n              <Button variant="ghost" onPress={close}>\n                Cancel\n              </Button>\n              <Button variant="primary">Login</Button>\n            </Inline>\n          </Stack>\n        </>\n      )}\n    </Dialog>\n  </Dialog.Trigger>\n);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"dismiss-dialog",children:(0,t.jsx)(n.a,{href:"#dismiss-dialog",children:"Dismiss Dialog"})}),"\n",(0,t.jsxs)(n.p,{children:["If you choose to add ",(0,t.jsx)(n.code,{children:"dismissable={false}"})," to your ",(0,t.jsx)(n.code,{children:"<Dialog.Trigger>"}),", you can't exit the dialog with clicking on the underlay. Notice to add a action button or the ",(0,t.jsx)(n.code,{children:"closeButton"})," property to the ",(0,t.jsx)(n.code,{children:"<Dialog>"})," as shown in the example, without that you can't click out of the dialog. You just have the possibility to use the escape key on your keyboard. But that's also a property you can set to false."]}),"\n",(0,t.jsx)(r,{children:(0,t.jsx)(h,{})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Button, Dialog, Headline, Text } from \'@marigold/components\';\n\nexport const DialogDismiss = () => (\n  <Dialog.Trigger dismissable={false}>\n    <Button variant="primary">Open me</Button>\n    <Dialog closeButton>\n      <Headline level="3">Information!</Headline>\n      <Text>This is a simple info Dialog.</Text>\n    </Dialog>\n  </Dialog.Trigger>\n);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"dialog-opend-from-menu",children:(0,t.jsx)(n.a,{href:"#dialog-opend-from-menu",children:"Dialog opend from Menu"})}),"\n",(0,t.jsxs)(n.p,{children:["This Example shows how to open a ",(0,t.jsx)(n.a,{href:"/components/dialog/",children:(0,t.jsx)(n.code,{children:"<Dialog>"})})," from a ",(0,t.jsx)(n.code,{children:"<Menu.Item>"}),".\nFor that you have not to use a ",(0,t.jsx)(n.code,{children:"<Dialog.Trigger>"}),", instead use our ",(0,t.jsx)(n.code,{children:"<Dialog.Controller>"}),". With that you don't have to use a ",(0,t.jsx)(n.code,{children:"<Button>"})," to trigger the dialog."]}),"\n",(0,t.jsx)(r,{children:(0,t.jsx)(u,{})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { useState } from \'react\';\nimport {\n  Body,\n  Button,\n  Dialog,\n  Footer,\n  Header,\n  Headline,\n  Inline,\n  Menu,\n  Stack,\n  Text,\n} from \'@marigold/components\';\n\nexport const OpenDialogFromMenu = () => {\n  const [open, setDialogOpen] = useState(false);\n  const handleAction = (action: \'save\' | \'delete\') => {\n    switch (action) {\n      case \'save\':\n        alert(\'saved!\');\n        break;\n      case \'delete\':\n        setDialogOpen(true);\n        break;\n      default:\n        throw new Error(`Unhandled action "${action}"!`);\n    }\n  };\n\n  return (\n    <>\n      <Menu.Trigger>\n        <Button variant="menu" size="small">\n          Settings\n        </Button>\n        <Menu onAction={handleAction}>\n          <Menu.Item key="save">Save</Menu.Item>\n          <Menu.Item key="delete">Delete</Menu.Item>\n        </Menu>\n      </Menu.Trigger>\n      <Dialog.Controller open={open} onOpenChange={setDialogOpen}>\n        <Dialog closeButton>\n          {({ close, titleProps }) => (\n            <Stack space="medium">\n              <Header>\n                <Headline {...titleProps}>Confirm delete</Headline>\n              </Header>\n              <Body>\n                <Text>Do you really wanna delete this?</Text>\n              </Body>\n              <Footer>\n                <Inline space="medium">\n                  <Button size="small" variant="ghost" onPress={close}>\n                    Cancel\n                  </Button>\n                  <Button size="small" variant="primary" onPress={close}>\n                    Delete\n                  </Button>\n                </Inline>\n              </Footer>\n            </Stack>\n          )}\n        </Dialog>\n      </Dialog.Controller>\n    </>\n  );\n};\n'})})]})}function l(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,i.ah)(),e.components),o=n.wrapper;return o?(0,t.jsx)(o,Object.assign({},e,{children:(0,t.jsx)(s,e)})):s(e)}}},function(e){e.O(0,[9774,2888,179],(function(){return n=9035,e(e.s=n);var n}));var n=e.O();_N_E=n}]);