(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2679],{9490:function(e,r,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/number-field",function(){return n(8281)}])},8281:function(e,r,n){"use strict";n.r(r),n.d(r,{__N_SSG:function(){return l},title:function(){return s}});var i=n(5250),t=n(7160),l=!0,s="NumberField";function o(e){var r=Object.assign({p:"p",code:"code",h2:"h2",a:"a",h3:"h3",pre:"pre"},(0,t.ah)(),e.components),n=r.Toc,l=r.Preview,s=r.NumberField,o=r.PropsTable,a=r.BasicNumberField,u=r.DisabledNumberField,p=r.RequiredNumberField,c=r.ErrorNumberField,h=r.ValuesNumberField,m=r.AmountNumberField,b=r.HideNumberField,x=r.FormatNumberField;return m||d("AmountNumberField",!0),a||d("BasicNumberField",!0),u||d("DisabledNumberField",!0),c||d("ErrorNumberField",!0),x||d("FormatNumberField",!0),b||d("HideNumberField",!0),s||d("NumberField",!0),l||d("Preview",!0),o||d("PropsTable",!0),p||d("RequiredNumberField",!0),n||d("Toc",!0),h||d("ValuesNumberField",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n,{selector:"#toc",items:'[{"anchor":"#usage","title":"Usage"},{"anchor":"#import","title":"Import"},{"anchor":"#props","title":"Props"},{"anchor":"#examples","title":"Examples"},{"anchor":"#simple-number-field","title":"Simple Number Field"},{"anchor":"#disabled-number-field","title":"Disabled Number Field"},{"anchor":"#required-number-field","title":"Required Number Field"},{"anchor":"#number-field-with-an-error","title":"Number Field with an Error"},{"anchor":"#min-and-max-values","title":"Min and max Values"},{"anchor":"#step-amount","title":"Step Amount"},{"anchor":"#hide-stepper","title":"Hide Stepper"},{"anchor":"#display-different-format-options","title":"Display different Format Options"}]'}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"<NumberField>"})," component allows users to enter numbers with a keyboard. This includes plain numbers as well as percentages, decimals and sums of money."]}),"\n",(0,i.jsx)(r.p,{children:"It consists of a label, an input field and a help text. The latter also includes error messages."}),"\n",(0,i.jsxs)(r.p,{children:["A special propertiy is the ",(0,i.jsx)(r.code,{children:"hideStepper"})," prop, with that you can choose if you want to hide the buttons for adding/ removing values. You can also set all properties from the regular HTML input element."]}),"\n",(0,i.jsx)(l,{children:(0,i.jsx)(s,{label:"Try me",description:"You should really try this!",defaultValue:9.99,formatOptions:{style:"currency",currency:"EUR"}})}),"\n",(0,i.jsx)(r.h2,{id:"usage",children:(0,i.jsx)(r.a,{href:"#usage",children:"Usage"})}),"\n",(0,i.jsx)(r.h3,{id:"import",children:(0,i.jsx)(r.a,{href:"#import",children:"Import"})}),"\n",(0,i.jsx)(r.p,{children:"To import the component you just have to use this code below."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"import { NumberField } from '@marigold/components';\n"})}),"\n",(0,i.jsx)(r.h3,{id:"props",children:(0,i.jsx)(r.a,{href:"#props",children:"Props"})}),"\n",(0,i.jsx)(o,{props:[{property:"label",type:"ReactNode",description:"The label text. ",default:"none"},{property:"description",type:"ReactNode",description:"A helpful text.",default:"none"},{property:"errorMessage",type:"ReactNode",description:"An error message.",default:"none"},{property:"error",type:"boolean",description:"If `true`, the field is considered invalid and if set the errorMessage is shown instead of the `description`.",default:"false"},{property:"value",type:"number",description:"The value of the input field.",default:"none"},{property:"disabled",type:"boolean",description:"If `true`, the input is disabled.",default:"false"},{property:"required",type:"boolean",description:"If `true`, the input is required.",default:"false"},{property:"readOnly",type:"boolean",description:"If `true`, the input is readOnly.",default:"false"},{property:"onChange",type:"function",description:"A callback function that is called with the input's current value when the input value changes.",default:"none"},{property:"formatOptions",type:"Intl.NumberFormatOptions",description:"Apply formatting. See `Intl.NumberFormatOptions` for available options.",default:"none"},{property:"width",type:"string",description:"Control the width of the field.",default:"100%"},{property:"minValue",type:"number",description:"Sets the minimal value of the input.",default:"none"},{property:"maxValue",type:"number",description:"Sets the maximal value of the input.",default:"none"},{property:"hideStepper",type:"boolean",description:"Property for hiding the step buttons of the field.",default:"false"},{property:"step",type:"number",description:"Sets the amount of steps the input should take.",default:"1"},{property:"...",type:"",description:"Yes you can use all regular attributes of input!",default:""}]}),"\n",(0,i.jsx)(r.h2,{id:"examples",children:(0,i.jsx)(r.a,{href:"#examples",children:"Examples"})}),"\n",(0,i.jsx)(r.h3,{id:"simple-number-field",children:(0,i.jsx)(r.a,{href:"#simple-number-field",children:"Simple Number Field"})}),"\n",(0,i.jsxs)(r.p,{children:["This example shows a regular ",(0,i.jsx)(r.code,{children:"<NumberField>"})," without any special props."]}),"\n",(0,i.jsx)(l,{children:(0,i.jsx)(a,{})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"import { NumberField } from '@marigold/components';\n\nexport const BasicNumberField = () => <NumberField label=\"Numbers\" />;\n"})}),"\n",(0,i.jsx)(r.h3,{id:"disabled-number-field",children:(0,i.jsx)(r.a,{href:"#disabled-number-field",children:"Disabled Number Field"})}),"\n",(0,i.jsxs)(r.p,{children:["You can disable the ",(0,i.jsx)(r.code,{children:"<NumberField>"})," so that the user can't interact with it anymore."]}),"\n",(0,i.jsx)(l,{children:(0,i.jsx)(u,{})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"import { NumberField } from '@marigold/components';\n\nexport const DisabledNumberField = () => (\n  <NumberField label=\"Field disabled\" disabled />\n);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"required-number-field",children:(0,i.jsx)(r.a,{href:"#required-number-field",children:"Required Number Field"})}),"\n",(0,i.jsxs)(r.p,{children:["If you want a ",(0,i.jsx)(r.code,{children:"<NumberField>"})," to be required, you just have to add the property ",(0,i.jsx)(r.code,{children:"required"}),". With that the small required icon appears next to the label."]}),"\n",(0,i.jsx)(l,{children:(0,i.jsx)(p,{})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"import { NumberField } from '@marigold/components';\n\nexport const RequiredNumberField = () => (\n  <NumberField label=\"Numbers\" required />\n);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"number-field-with-an-error",children:(0,i.jsx)(r.a,{href:"#number-field-with-an-error",children:"Number Field with an Error"})}),"\n",(0,i.jsxs)(r.p,{children:["This example shows how to use the ",(0,i.jsx)(r.code,{children:"error"})," with the ",(0,i.jsx)(r.code,{children:"errorMessage"}),"."]}),"\n",(0,i.jsx)(l,{children:(0,i.jsx)(c,{})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:'import { NumberField } from \'@marigold/components\';\n\nexport const ErrorNumberField = () => (\n  <NumberField label="Amount" error errorMessage="Something went wrong!" />\n);\n'})}),"\n",(0,i.jsx)(r.h3,{id:"min-and-max-values",children:(0,i.jsx)(r.a,{href:"#min-and-max-values",children:"Min and max Values"})}),"\n",(0,i.jsxs)(r.p,{children:["The example shows how to use the ",(0,i.jsx)(r.code,{children:"minValue"})," and the ",(0,i.jsx)(r.code,{children:"maxValue"}),'. You can see that you can\'t get under "0" or above "100". If you try to, the step buttons will be disabled.']}),"\n",(0,i.jsx)(l,{children:(0,i.jsx)(h,{})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"import { NumberField } from '@marigold/components';\n\nexport const ValuesNumberField = () => (\n  <NumberField label=\"Length\" defaultValue={55} minValue={0} maxValue={100} />\n);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"step-amount",children:(0,i.jsx)(r.a,{href:"#step-amount",children:"Step Amount"})}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"step"}),' property sets the amount of steps the input should use. Default is set to "1".']}),"\n",(0,i.jsx)(l,{children:(0,i.jsx)(m,{})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"import { NumberField } from '@marigold/components';\n\nexport const AmountNumberField = () => (\n  <NumberField label=\"Length\" defaultValue={10} step={10} />\n);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"hide-stepper",children:(0,i.jsx)(r.a,{href:"#hide-stepper",children:"Hide Stepper"})}),"\n",(0,i.jsxs)(r.p,{children:["If you don't want the step buttons to appear, you can easily remove these with the ",(0,i.jsx)(r.code,{children:"hideStepper"})," property."]}),"\n",(0,i.jsx)(l,{children:(0,i.jsx)(b,{})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"import { NumberField } from '@marigold/components';\n\nexport const HideNumberField = () => (\n  <NumberField label=\"Numbers\" hideStepper />\n);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"display-different-format-options",children:(0,i.jsx)(r.a,{href:"#display-different-format-options",children:"Display different Format Options"})}),"\n",(0,i.jsxs)(r.p,{children:["In this example you can see how different ",(0,i.jsx)(r.code,{children:"<NumberFields>"})," can look like. You can choose between all ",(0,i.jsx)(r.code,{children:"Intl.NumberFormatOptions"}),". In this case you can see ",(0,i.jsx)(r.code,{children:"percent"}),",",(0,i.jsx)(r.code,{children:"unit"}),", ",(0,i.jsx)(r.code,{children:"decimal"})," and ",(0,i.jsx)(r.code,{children:"currency"}),"."]}),"\n",(0,i.jsx)(l,{children:(0,i.jsx)(x,{})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"import { NumberField, Stack } from '@marigold/components';\n\nexport const FormatNumberField = () => (\n  <Stack space=\"medium\">\n    <NumberField\n      label=\"Amount\"\n      defaultValue={19.99}\n      formatOptions={{\n        style: 'currency',\n        currency: 'USD',\n      }}\n    />\n    <NumberField\n      label=\"Decimals\"\n      formatOptions={{\n        signDisplay: 'exceptZero',\n        minimumFractionDigits: 1,\n        maximumFractionDigits: 2,\n      }}\n      defaultValue={0}\n    />\n    <NumberField\n      label=\"Length\"\n      defaultValue={150}\n      minValue={0}\n      formatOptions={{\n        style: 'unit',\n        unit: 'centimeter',\n        unitDisplay: 'short',\n      }}\n    />\n    <NumberField\n      label=\"Percentage\"\n      defaultValue={0.42}\n      formatOptions={{\n        style: 'percent',\n      }}\n    />\n  </Stack>\n);\n"})})]})}function d(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}r.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=Object.assign({},(0,t.ah)(),e.components),n=r.wrapper;return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(o,e)})):o(e)}}},function(e){e.O(0,[9774,2888,179],(function(){return r=9490,e(e.s=r);var r}));var r=e.O();_N_E=r}]);