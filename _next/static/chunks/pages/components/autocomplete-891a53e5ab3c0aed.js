(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9054],{4717:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/autocomplete",function(){return n(5573)}])},5573:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return l},title:function(){return r}});var o=n(5250),s=n(7160),l=!0,r="Autocomplete";function i(e){var t=Object.assign({p:"p",code:"code",h2:"h2",a:"a",h3:"h3",pre:"pre"},(0,s.ah)(),e.components),n=t.Toc,l=t.Preview,i=t.BasicAutocomplete,c=t.AppearanceTable,u=t.PropsTable,p=t.AutocompleteUncontrolledDemo,m=t.AutocompleteControlledDemo,d=t.AutocompleteAsyncDemo;return c||a("AppearanceTable",!0),d||a("AutocompleteAsyncDemo",!0),m||a("AutocompleteControlledDemo",!0),p||a("AutocompleteUncontrolledDemo",!0),i||a("BasicAutocomplete",!0),l||a("Preview",!0),u||a("PropsTable",!0),n||a("Toc",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n,{selector:"#toc",items:'[{"anchor":"#usage","title":"Usage"},{"anchor":"#import","title":"Import"},{"anchor":"#apperance","title":"Apperance"},{"anchor":"#props","title":"Props"},{"anchor":"#item-props","title":"Item props"},{"anchor":"#examples","title":"Examples"},{"anchor":"#uncontrolled-usage","title":"Uncontrolled Usage"},{"anchor":"#controlled-usage-with-custom-filter","title":"Controlled Usage with custom Filter"},{"anchor":"#working-with-asynchronous-data","title":"Working with asynchronous Data"}]'}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"<Autocomplete>"})," component is a form element with an associated popup that enables users to select a value from a collection of suggested values. Uusers may either select one of the suggestions from the popup or type a value."]}),"\n",(0,o.jsxs)(t.p,{children:["Suggestions are represented by the ",(0,o.jsx)(t.code,{children:"<Autocomplete.Item>"})," component that must be used as children of the ",(0,o.jsx)(t.code,{children:"<Autocomplete>"})," component."]}),"\n",(0,o.jsx)(l,{children:(0,o.jsx)(i,{})}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:(0,o.jsx)(t.a,{href:"#usage",children:"Usage"})}),"\n",(0,o.jsx)(t.h3,{id:"import",children:(0,o.jsx)(t.a,{href:"#import",children:"Import"})}),"\n",(0,o.jsx)(t.p,{children:"To import the component you just have to use this code below."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"import { Autocomplete } from '@marigold/components';\n"})}),"\n",(0,o.jsx)(t.h3,{id:"apperance",children:(0,o.jsx)(t.a,{href:"#apperance",children:"Apperance"})}),"\n",(0,o.jsx)(c,{component:r}),"\n",(0,o.jsx)(t.h3,{id:"props",children:(0,o.jsx)(t.a,{href:"#props",children:"Props"})}),"\n",(0,o.jsx)(u,{props:[{property:"label",type:"ReactNode",description:"The label text. If you don't want to visually display a label, provide an `aria-label` or `aria-labelledby` attribute for accessibility."},{property:"defaultValue",type:"string",description:"The value of the input (uncontrolled)."},{property:"value",type:"string",description:"The value of the input (controlled)."},{property:"defaultItems",type:"Iterable<object>",description:"The list of suggestions (uncontrolled)."},{property:"items",type:"Iterable<object>",description:"The list of suggestions (controlled)."},{property:"description",type:"ReactNode",description:"A helpful text."},{property:"errorMessage",type:"ReactNode",description:"An error message."},{property:"error",type:"boolean",description:"If `true`, the field is considered invalid and if set the `errorMessage` is shown instead of the `description`.",default:"false"},{property:"disabled",type:"boolean",description:"If `true`, the input is disabled.",default:"false"},{property:"disabledKeys",type:"Iterable<Key>",description:"Suggestions that are disabled. Items cannot be selected, focused, or otherwise interacted with."},{property:"required",type:"boolean",description:"If `true`, the input is required",default:"false"},{property:"readOnly",type:"boolean",description:"If `true`, the input is readOnly.",default:"false"},{property:"width",type:"string",description:"Control the `width` of the field.",default:"100%"},{property:"menuTrigger",type:'"focus"| "input" | "manual"',description:"Set which interaction shows the menu.",default:"input"},{property:"autoFocus",type:"boolean",description:"Whether the element should receive focus on render."},{property:"onOpenChange",type:'(isOpen: boolean, menuTrigger?: "focus"| "input" | "manual") => void',description:"Called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu."},{property:"onChange",type:"(value: string) => void",description:"Called when the input value changes."},{property:"onSubmit",type:"(key: Key | null, value: string | null) => void",description:'Handler that is called when the SearchAutocomplete is submitted.\n        \n      A "key" will be passed if the submission is a selected item (e.g. a user clicks or presses enter on an option). If the input is a custom "value", "key" will be "null".\n        \n      A "value" will be passed if the submission is a custom value (e.g. a user types then presses enter). If the input is a selected item, "value" will be "null".'},{property:"onClear",type:"() => void",description:"Called when the clear button is pressed."}]}),"\n",(0,o.jsx)(t.h3,{id:"item-props",children:(0,o.jsx)(t.a,{href:"#item-props",children:"Item props"})}),"\n",(0,o.jsx)(u,{props:[{property:"key",type:"string",description:"The idenfitier of the item. Must be unique."}]}),"\n",(0,o.jsx)(t.h2,{id:"examples",children:(0,o.jsx)(t.a,{href:"#examples",children:"Examples"})}),"\n",(0,o.jsx)(t.h3,{id:"uncontrolled-usage",children:(0,o.jsx)(t.a,{href:"#uncontrolled-usage",children:"Uncontrolled Usage"})}),"\n",(0,o.jsxs)(t.p,{children:["The following example shows how to use the ",(0,o.jsx)(t.code,{children:"Autocomplete"})," component in an uncontrolled manner. States, such as the user typing into the input or updating the suggestions, are automatically handled by the component. The ",(0,o.jsx)(t.code,{children:"onSubmit"})," handler will be called when the user chooses a suggestion or submits their custom value."]}),"\n",(0,o.jsx)(l,{children:(0,o.jsx)(p,{})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'import { Key, useState } from \'react\';\nimport { Autocomplete, Stack, Text } from \'@marigold/components\';\n\nexport const AutocompleteUncontrolledDemo = () => {\n  const [submitted, setSubmitted] = useState<[Key | null, string | null]>([\n    \'\',\n    \'\',\n  ]);\n\n  return (\n    <Stack space="medium">\n      <Autocomplete\n        label="Favorite vegetable:"\n        onSubmit={(key, val) => setSubmitted([key, val])}\n      >\n        <Autocomplete.Item key="spinach">Spinach</Autocomplete.Item>\n        <Autocomplete.Item key="carrots">Carrots</Autocomplete.Item>\n        <Autocomplete.Item key="broccoli">Broccoli</Autocomplete.Item>\n        <Autocomplete.Item key="garlic">Garlic</Autocomplete.Item>\n        <Autocomplete.Item key="brussels-sprouts">\n          Brussels Sprouts\n        </Autocomplete.Item>\n        <Autocomplete.Item key="kale">Kale</Autocomplete.Item>\n        <Autocomplete.Item key="peas">Peas</Autocomplete.Item>\n        <Autocomplete.Item key="beets">Beets</Autocomplete.Item>\n      </Autocomplete>\n      <Text fontWeight="900">User subbmitted: "{submitted}"</Text>\n    </Stack>\n  );\n};\n'})}),"\n",(0,o.jsx)(t.h3,{id:"controlled-usage-with-custom-filter",children:(0,o.jsx)(t.a,{href:"#controlled-usage-with-custom-filter",children:"Controlled Usage with custom Filter"})}),"\n",(0,o.jsxs)(t.p,{children:["If you want to listen or act while the user is typing into the ",(0,o.jsx)(t.code,{children:"Autocomplete"})," field, you can switch to controlled mode by adding an ",(0,o.jsx)(t.code,{children:"onChange"})," handler and setting the ",(0,o.jsx)(t.code,{children:"value"})," manually."]}),"\n",(0,o.jsx)(t.p,{children:'This is especially helpful if you need to customize the filtering. For example, you may only want to show suggestions when the user has typed at least two characters. Furthermore, you can improve the matching, as shown in the example below. In the demo, the user would not receive a suggestion if they typed "ssp" without the custom filter.'}),"\n",(0,o.jsx)(l,{children:(0,o.jsx)(m,{})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"import { Key, useMemo, useState } from 'react';\nimport { Autocomplete, Stack, Text } from '@marigold/components';\n\nexport const AutocompleteControlledDemo = () => {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const vegetables = [\n    { id: 'spinach', name: 'Spinach' },\n    { id: 'carrots', name: 'Carrots' },\n    { id: 'broccoli', name: 'Broccoli' },\n    { id: 'garlic', name: 'Garlic' },\n    { id: 'brussels-sprouts', name: 'Brussels Sprouts' },\n    { id: 'kale', name: 'Kale' },\n    { id: 'peas', name: 'Peas' },\n    { id: 'beets', name: 'Beets' },\n  ];\n\n  const [input, setInput] = useState('');\n  const [submitted, setSubmitted] = useState<[Key | null, string | null]>([\n    '',\n    '',\n  ]);\n  const filteredVeggies = useMemo(\n    () =>\n      vegetables.filter(item =>\n        item.name\n          .toLocaleLowerCase()\n          .replace(/\\s/g, '')\n          .includes(input.toLocaleLowerCase().replace(/\\s/g, ''))\n      ),\n    [vegetables, input]\n  );\n\n  return (\n    <Stack space=\"large\">\n      <Autocomplete\n        label=\"Favorite vegetable:\"\n        items={filteredVeggies}\n        value={input}\n        onChange={setInput}\n        onSubmit={(key, val) => setSubmitted([key, val])}\n      >\n        {(item: (typeof vegetables)[number]) => (\n          <Autocomplete.Item>{item.name}</Autocomplete.Item>\n        )}\n      </Autocomplete>\n      <Stack>\n        <Text fontWeight=\"900\">User input: \"{input}\"</Text>\n        <Text fontWeight=\"900\">User subbmitted: \"{submitted}\"</Text>\n      </Stack>\n    </Stack>\n  );\n};\n"})}),"\n",(0,o.jsx)(t.h3,{id:"working-with-asynchronous-data",children:(0,o.jsx)(t.a,{href:"#working-with-asynchronous-data",children:"Working with asynchronous Data"})}),"\n",(0,o.jsxs)(t.p,{children:["The Autocomplete component supports working with asynchronous data. In the example below, the ",(0,o.jsx)(t.a,{href:"/hooks/useAsyncList",children:(0,o.jsx)(t.code,{children:"useAsyncList"})})," hook is used to handle the loading and filtering of data from the server."]}),"\n",(0,o.jsx)(l,{children:(0,o.jsx)(d,{})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"import { useState, Key } from 'react';\nimport {\n  useAsyncList,\n  Autocomplete,\n  Message,\n  Stack,\n  Table,\n} from '@marigold/components';\n\nexport const AutocompleteAsyncDemo = () => {\n  const columns = [\n    { name: 'Name', key: 'name' },\n    { name: 'Gender', key: 'gender' },\n    { name: 'Skin Color', key: 'skin_color' },\n    { name: 'height', key: 'height' },\n    { name: 'Weight', key: 'mass' },\n  ];\n\n  const [result, setResult] = useState<{ [key: string]: string }[] | null>(\n    null\n  );\n  const list = useAsyncList<{ [key: string]: string }>({\n    async load({ signal, filterText }) {\n      const res = await fetch(\n        `https://swapi.py4e.com/api/people/?search=${filterText}`,\n        { signal }\n      );\n      const json = await res.json();\n\n      return {\n        items: json.results,\n      };\n    },\n  });\n  const handleSubmit = (key: Key | null, value: string | null) => {\n    if (key) {\n      const result = list.items.find(c => c.name === key);\n      setResult(result ? [result] : null);\n    }\n    if (value) {\n      setResult(list.items);\n    }\n  };\n\n  return (\n    <Stack space=\"large\">\n      <Autocomplete\n        label=\"Star Wars Character\"\n        menuTrigger=\"focus\"\n        items={list.items}\n        value={list.filterText}\n        onChange={list.setFilterText}\n        onSubmit={handleSubmit}\n      >\n        {(item: any) => (\n          <Autocomplete.Item key={item.name}>{item.name}</Autocomplete.Item>\n        )}\n      </Autocomplete>\n      {result === null ? null : result.length > 0 ? (\n        <Table aria-label=\"Character results\" selectionMode=\"none\" stretch>\n          <Table.Header columns={columns}>\n            {column => <Table.Column>{column.name}</Table.Column>}\n          </Table.Header>\n          <Table.Body items={result}>\n            {item => (\n              <Table.Row key={item.name}>\n                {columnKey => <Table.Cell>{item[columnKey]}</Table.Cell>}\n              </Table.Row>\n            )}\n          </Table.Body>\n        </Table>\n      ) : (\n        <Message messageTitle=\"Empty Result\">\n          No Character matched your query, sorry! \ud83d\ude2d\n        </Message>\n      )}\n    </Stack>\n  );\n};\n"})})]})}function a(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},(0,s.ah)(),e.components),n=t.wrapper;return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(i,e)})):i(e)}}},function(e){e.O(0,[9774,2888,179],(function(){return t=4717,e(e.s=t);var t}));var t=e.O();_N_E=t}]);