(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2343],{5019:function(e,o,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/tooltip",function(){return t(2546)}])},2546:function(e,o,t){"use strict";t.r(o),t.d(o,{__N_SSG:function(){return r},title:function(){return s}});var n=t(5250),i=t(8570),r=!0;let s="Tooltip";function l(e){let o=Object.assign({p:"p",code:"code",h2:"h2",a:"a",pre:"pre",h3:"h3"},(0,i.ah)(),e.components),{Toc:t,Preview:r,Button:l,Text:c,Tooltip:a,AppearanceTable:h,PropsTable:d,BasicTooltip:u,CustomTooltip:f,FocusTooltip:m,PressedTooltip:x}=o;return h||p("AppearanceTable",!0),u||p("BasicTooltip",!0),l||p("Button",!0),f||p("CustomTooltip",!0),m||p("FocusTooltip",!0),x||p("PressedTooltip",!0),r||p("Preview",!0),d||p("PropsTable",!0),c||p("Text",!0),t||p("Toc",!0),a||p("Tooltip",!0),a.Trigger||p("Tooltip.Trigger",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t,{selector:"#toc",items:'[{"anchor":"#usage","title":"Usage"},{"anchor":"#appearance","title":"Appearance"},{"anchor":"#trigger-props","title":"Trigger Props"},{"anchor":"#examples","title":"Examples"},{"anchor":"#default-tooltip","title":"Default Tooltip"},{"anchor":"#tooltip-with-custom-placement","title":"Tooltip with custom placement"},{"anchor":"#tooltip-only-shows-when-focused","title":"Tooltip only shows when focused"},{"anchor":"#controlled-tooltip","title":"Controlled Tooltip"}]'}),"\n",(0,n.jsxs)(o.p,{children:["The ",(0,n.jsx)(o.code,{children:"<Tooltip>"})," components allows to provide additional information to that user. For that the ",(0,n.jsx)(o.code,{children:"<Tooltip>"})," is divided into a ",(0,n.jsx)(o.code,{children:"<Tooltip.Trigger>"})," and the ",(0,n.jsx)(o.code,{children:"<Tooltip>"})," itself. You need to wrap the trigger around the ",(0,n.jsx)(o.code,{children:"<Tooltip>"})," and a simple button, which is necessary for handle actions."]}),"\n",(0,n.jsxs)(o.p,{children:["You should use the ",(0,n.jsx)(o.code,{children:"<Tooltip>"})," if you want to show helpful, short information to the user."]}),"\n",(0,n.jsx)(r,{children:(0,n.jsxs)(a.Trigger,{children:[(0,n.jsx)(l,{variant:"primary",children:(0,n.jsx)(c,{children:"Hover Me"})}),(0,n.jsx)(a,{children:"Tooltip"})]})}),"\n",(0,n.jsx)(o.h2,{id:"usage",children:(0,n.jsx)(o.a,{href:"#usage",children:"Usage"})}),"\n",(0,n.jsx)(o.p,{children:"To import the component you just have to use this code below."}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-tsx",children:"import { Tooltip } from '@marigold/components';\n"})}),"\n",(0,n.jsx)(o.h3,{id:"appearance",children:(0,n.jsx)(o.a,{href:"#appearance",children:"Appearance"})}),"\n",(0,n.jsx)(h,{component:s}),"\n",(0,n.jsx)(o.h3,{id:"trigger-props",children:(0,n.jsx)(o.a,{href:"#trigger-props",children:"Trigger Props"})}),"\n",(0,n.jsx)(d,{props:[{property:"disabled",type:"boolean",description:"Disables the tooltip.",default:"false"},{property:"offset",type:"number",description:"Sets the offset of the tooltip.",default:"none"},{property:"crossOffset",type:"number",description:"Sets the crossOffset of the tooltip.",default:"none"},{property:"delay",type:"number",description:"Sets the delay with which the tooltip should appear.",default:"1000"},{property:"trigger",type:"focus",description:"Sets the trigger behavior of the tooltip. Can be switched to just focus.",default:"undefined"},{property:"placement",type:"top, bottom, left, right",description:"Sets the placement of the tooltip",default:"top"},{property:"open",type:"boolean",description:"Sets the open state of the tooltip.",default:"undefined"},{property:"onOpenChange",type:"function",description:"Handles the the open state of the tooltip.",default:"none"}]}),"\n",(0,n.jsx)(o.h2,{id:"examples",children:(0,n.jsx)(o.a,{href:"#examples",children:"Examples"})}),"\n",(0,n.jsx)(o.h3,{id:"default-tooltip",children:(0,n.jsx)(o.a,{href:"#default-tooltip",children:"Default Tooltip"})}),"\n",(0,n.jsxs)(o.p,{children:["Here you can see a simple ",(0,n.jsx)(o.code,{children:"<Tooltip>"})," use case. You can hover or tab the button to see the tooltip message."]}),"\n",(0,n.jsx)(r,{children:(0,n.jsx)(u,{})}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-tsx",children:"import { Button, Tooltip } from '@marigold/components';\nimport { Info } from '@marigold/icons';\n\nexport const BasicTooltip = () => (\n  <Tooltip.Trigger>\n    <Button>\n      <Info fill=\"info\" />\n    </Button>\n    <Tooltip>Tooltip</Tooltip>\n  </Tooltip.Trigger>\n);\n"})}),"\n",(0,n.jsx)(o.h3,{id:"tooltip-with-custom-placement",children:(0,n.jsx)(o.a,{href:"#tooltip-with-custom-placement",children:"Tooltip with custom placement"})}),"\n",(0,n.jsxs)(o.p,{children:["In this example the placement of the ",(0,n.jsx)(o.code,{children:"<Tooltip>"})," is set to the right. By default it is set to the top. If there isn't enough space for the placement it moves to the bottom."]}),"\n",(0,n.jsx)(r,{children:(0,n.jsx)(f,{})}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-tsx",children:"import { Button, Tooltip } from '@marigold/components';\n\nexport const CustomTooltip = () => (\n  <Tooltip.Trigger placement=\"right\">\n    <Button>Hover me!</Button>\n    <Tooltip>Tooltip</Tooltip>\n  </Tooltip.Trigger>\n);\n"})}),"\n",(0,n.jsx)(o.h3,{id:"tooltip-only-shows-when-focused",children:(0,n.jsx)(o.a,{href:"#tooltip-only-shows-when-focused",children:"Tooltip only shows when focused"})}),"\n",(0,n.jsxs)(o.p,{children:["You can use the property ",(0,n.jsx)(o.code,{children:"trigger"})," to the ",(0,n.jsx)(o.code,{children:"<Tooltip.Trigger>"})," and setting it to ",(0,n.jsx)(o.code,{children:"focus"}),". With that you can't hover it anymore, you have to tab in with the keyboard."]}),"\n",(0,n.jsx)(r,{children:(0,n.jsx)(m,{})}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-tsx",children:"import { Button, Tooltip } from '@marigold/components';\n\nexport const FocusTooltip = () => (\n  <Tooltip.Trigger trigger=\"focus\">\n    <Button>Hover me!</Button>\n    <Tooltip>Tooltip</Tooltip>\n  </Tooltip.Trigger>\n);\n"})}),"\n",(0,n.jsx)(o.h3,{id:"controlled-tooltip",children:(0,n.jsx)(o.a,{href:"#controlled-tooltip",children:"Controlled Tooltip"})}),"\n",(0,n.jsxs)(o.p,{children:["The open state of the tooltip can be controlled via the ",(0,n.jsx)(o.code,{children:"open"})," and ",(0,n.jsx)(o.code,{children:"onOpenChange"})," props."]}),"\n",(0,n.jsx)(r,{children:(0,n.jsx)(x,{})}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-tsx",children:"import { Button, Tooltip } from '@marigold/components';\nimport { useState } from 'react';\n\nexport const PressedTooltip = () => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Tooltip.Trigger open={open}>\n      <Button\n        variant=\"primary\"\n        onPressStart={() => setOpen(true)}\n        onPressEnd={() => setOpen(false)}\n      >\n        Press and hold me!\n      </Button>\n      <Tooltip>I am a tooltip!</Tooltip>\n    </Tooltip.Trigger>\n  );\n};\n"})})]})}function p(e,o){throw Error("Expected "+(o?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}o.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:o}=Object.assign({},(0,i.ah)(),e.components);return o?(0,n.jsx)(o,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=5019)}),_N_E=e.O()}]);