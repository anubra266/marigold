(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[393],{5871:function(e,t,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/text-field",function(){return r(8705)}])},8705:function(e,t,r){"use strict";r.r(t),r.d(t,{__N_SSG:function(){return s},title:function(){return l}});var i=r(5250),n=r(8570),s=!0,l="TextField";function o(e){var t=Object.assign({p:"p",code:"code",h2:"h2",a:"a",h3:"h3",pre:"pre"},(0,n.ah)(),e.components),r=t.Toc,s=t.Preview,l=t.TextField,o=t.PropsTable,a=t.BasicTextField,c=t.DisabledTextField,p=t.RequiredTextField,h=t.ErrorTextField,x=t.FieldTextErrorNumberImput,u=t.TypesTextField;return a||d("BasicTextField",!0),c||d("DisabledTextField",!0),h||d("ErrorTextField",!0),x||d("FieldTextErrorNumberImput",!0),s||d("Preview",!0),o||d("PropsTable",!0),p||d("RequiredTextField",!0),l||d("TextField",!0),r||d("Toc",!0),u||d("TypesTextField",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r,{selector:"#toc",items:'[{"anchor":"#usage","title":"Usage"},{"anchor":"#import","title":"Import"},{"anchor":"#props","title":"Props"},{"anchor":"#examples","title":"Examples"},{"anchor":"#simple-text-field","title":"Simple Text Field"},{"anchor":"#disabled-text-field","title":"Disabled Text Field"},{"anchor":"#required-text-field","title":"Required Text Field"},{"anchor":"#text-field-with-an-error","title":"Text Field with an Error"},{"anchor":"#not-every-number-is-a-number","title":"Not every number is a "},{"anchor":"#use-different-input-methods","title":"Use different "}]'}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"<TextField>"})," is a form component which allows user to enter text with a keyboard. It consists of a label, an input field and a help text. The latter also contains error messages."]}),"\n",(0,i.jsxs)(t.p,{children:["It has many properties that it brings with it. You can set label for labeling the ",(0,i.jsx)(t.code,{children:"<TextField>"})," itself, a ",(0,i.jsx)(t.code,{children:"description"})," which behaves as help text. It is also possible to add error messages by adding the ",(0,i.jsx)(t.code,{children:"error"})," and ",(0,i.jsx)(t.code,{children:"errorMessage"})," prop. Another often used property is the ",(0,i.jsx)(t.code,{children:"required"})," prop. You can also write all other HTML input properties down."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(l,{label:"Try me",description:"You should really try this!"})}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:(0,i.jsx)(t.a,{href:"#usage",children:"Usage"})}),"\n",(0,i.jsx)(t.h3,{id:"import",children:(0,i.jsx)(t.a,{href:"#import",children:"Import"})}),"\n",(0,i.jsx)(t.p,{children:"To import the component you just have to use this code below."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"import { TextField } from '@marigold/components';\n"})}),"\n",(0,i.jsx)(t.h3,{id:"props",children:(0,i.jsx)(t.a,{href:"#props",children:"Props"})}),"\n",(0,i.jsx)(o,{props:[{property:"label",type:"ReactNode",description:"The label text. If you don't want to visually display a label, provide an `aria-label` or `aria-labelledby` attribute for accessibility.",default:"none"},{property:"description",type:"ReactNode",description:"A helpful text.",default:"none"},{property:"errorMessage",type:"ReactNode",description:"An error message.",default:"none"},{property:"error",type:"boolean",description:"If `true`, the field is considered invalid and if set the `errorMessage` is shown instead of the `description`.",default:"false"},{property:"value",type:"string",description:"The value of the input field.",default:"none"},{property:"disabled",type:"boolean",description:"If `true`, the input is disabled.",default:"false"},{property:"required",type:"boolean",description:"If `true`, the input is required",default:"false"},{property:"readOnly",type:"boolean",description:"If `true`, the input is readOnly.",default:"false"},{property:"type",type:"string",description:"The type of the input field.",default:"text"},{property:"onChange",type:"function",description:"A callback function that is called with the input's current value when the input `value` changes.",default:"none"},{property:"width",type:"string",description:"Control the `width` of the field.",default:"100%"},{property:"...",type:"",description:"Yes you can use all regular attributes of `input!`",default:""}]}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:(0,i.jsx)(t.a,{href:"#examples",children:"Examples"})}),"\n",(0,i.jsx)(t.h3,{id:"simple-text-field",children:(0,i.jsx)(t.a,{href:"#simple-text-field",children:"Simple Text Field"})}),"\n",(0,i.jsxs)(t.p,{children:["This is how a basic ",(0,i.jsx)(t.code,{children:"<TextField>"})," can look like."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(a,{})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"import { TextField } from '@marigold/components';\n\nexport const BasicTextField = () => <TextField label=\"Firstname\" />;\n"})}),"\n",(0,i.jsx)(t.h3,{id:"disabled-text-field",children:(0,i.jsx)(t.a,{href:"#disabled-text-field",children:"Disabled Text Field"})}),"\n",(0,i.jsxs)(t.p,{children:["If you want to implement a disabled ",(0,i.jsx)(t.code,{children:"<TextField>"})," you have to add the ",(0,i.jsx)(t.code,{children:"disabled"})," property."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(c,{})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"import { TextField } from '@marigold/components';\n\nexport const DisabledTextField = () => (\n  <TextField label=\"Field disabled\" disabled />\n);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"required-text-field",children:(0,i.jsx)(t.a,{href:"#required-text-field",children:"Required Text Field"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"required"})," property adds an required icon to the label."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(p,{})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"import { TextField } from '@marigold/components';\n\nexport const RequiredTextField = () => <TextField label=\"Name\" required />;\n"})}),"\n",(0,i.jsx)(t.h3,{id:"text-field-with-an-error",children:(0,i.jsx)(t.a,{href:"#text-field-with-an-error",children:"Text Field with an Error"})}),"\n",(0,i.jsxs)(t.p,{children:["The example shows how to set the ",(0,i.jsx)(t.code,{children:"error"})," and ",(0,i.jsx)(t.code,{children:"errorMessage"})," properties. If you fill in the field correctly, it will disappear automatically."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(h,{})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import { TextField } from \'@marigold/components\';\n\nexport const ErrorTextField = () => (\n  <TextField label="Name" error errorMessage="Something went wrong!" />\n);\n'})}),"\n",(0,i.jsx)(t.h3,{id:"not-every-number-is-a-number",children:(0,i.jsxs)(t.a,{href:"#not-every-number-is-a-number",children:["Not every number is a ",(0,i.jsx)(t.code,{children:"number"}),"!"]})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsxs)(t.a,{href:"https://www.coywolf.news/webmaster/accessible-number-input/",children:["Just because the input contains numbers, it is not necessarily correctly to use ",(0,i.jsx)(t.code,{children:"input[type=number]"}),"!"]})," You can also see in the example how the ",(0,i.jsx)(t.code,{children:"errorMessage"})," behaves if a false value is written in the input and how many possibilities you have using props."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(x,{})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import { TextField } from \'@marigold/components\';\nimport { useState } from \'react\';\n\nexport const FieldTextErrorNumberImput = () => {\n  const [value, setValue] = useState<string>(\'\');\n  const error = value.length > 0 && !/^\\d+$/.test(value);\n\n  return (\n    <TextField\n      label="Promo Code"\n      description="You\'ll find your promo code on the back of your ticket."\n      errorMessage="Your promo code is not valid! Please review your input."\n      value={value}\n      onChange={setValue}\n      error={error}\n      inputMode="numeric"\n      pattern="[0-9]*"\n    />\n  );\n};\n'})}),"\n",(0,i.jsx)(t.h3,{id:"use-different-input-methods",children:(0,i.jsxs)(t.a,{href:"#use-different-input-methods",children:["Use different ",(0,i.jsx)(t.code,{children:"input"})," methods"]})}),"\n",(0,i.jsx)(t.p,{children:"In this example you can see different types of inputs, like email, date or telephone number."}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(u,{})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import { Stack, TextField } from \'@marigold/components\';\n\nexport const TypesTextField = () => (\n  <Stack space="small">\n    <TextField label="EMail" type="email" />\n    <TextField label="Date" type="date" />\n    <TextField label="Phone Number" type="tel" />\n  </Stack>\n);\n'})})]})}function d(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},(0,n.ah)(),e.components),r=t.wrapper;return r?(0,i.jsx)(r,Object.assign({},e,{children:(0,i.jsx)(o,e)})):o(e)}}},function(e){e.O(0,[9774,2888,179],(function(){return t=5871,e(e.s=t);var t}));var t=e.O();_N_E=t}]);