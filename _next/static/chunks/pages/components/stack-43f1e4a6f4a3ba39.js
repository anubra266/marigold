(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5690],{8465:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/stack",function(){return t(9985)}])},9985:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return a},title:function(){return c}});var i=t(5250),s=t(8570),a=!0,c="Stack";function r(e){var n=Object.assign({p:"p",code:"code",a:"a",h2:"h2",h3:"h3",pre:"pre"},(0,s.ah)(),e.components),t=n.Toc,a=n.Preview,c=n.BasicStack,r=n.PropsTable,l=n.StackSpacing,d=n.NestedStack,h=n.HorizontalStack,p=n.VerticalStack;return c||o("BasicStack",!0),h||o("HorizontalStack",!0),d||o("NestedStack",!0),a||o("Preview",!0),r||o("PropsTable",!0),l||o("StackSpacing",!0),t||o("Toc",!0),p||o("VerticalStack",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t,{selector:"#toc",items:'[{"anchor":"#usage","title":"Usage"},{"anchor":"#import","title":"Import"},{"anchor":"#props","title":"Props"},{"anchor":"#examples","title":"Examples"},{"anchor":"#spacing","title":"Spacing"},{"anchor":"#nested","title":"Nested"},{"anchor":"#horizontal-alignment","title":"Horizontal Alignment"},{"anchor":"#vertical-alignment","title":"Vertical Alignment"}]'}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"<Stack>"})," component is a layout component that is there to stack its children. It has a flexbox context similar like the ",(0,i.jsx)(n.a,{href:"/components/inline/",children:(0,i.jsx)(n.code,{children:"<Inline>"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The component should be used anywhere were elements are stacked one atop another. It is also possible to nest if needed."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"<Stack>"})," uses the spaces from the given theme, but you can use ",(0,i.jsx)(n.a,{href:"/components/split/",children:(0,i.jsx)(n.code,{children:"<Split>"})})," to add bigger spacing. You can also align the elements horizontal and vertical."]}),"\n",(0,i.jsx)(a,{children:(0,i.jsx)(c,{})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:(0,i.jsx)(n.a,{href:"#usage",children:"Usage"})}),"\n",(0,i.jsx)(n.h3,{id:"import",children:(0,i.jsx)(n.a,{href:"#import",children:"Import"})}),"\n",(0,i.jsx)(n.p,{children:"To import the component you just have to use this code below."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Stack } from '@marigold/components';\n"})}),"\n",(0,i.jsx)(n.h3,{id:"props",children:(0,i.jsx)(n.a,{href:"#props",children:"Props"})}),"\n",(0,i.jsx)(r,{props:[{property:"space",type:"ResponsiveStyleValue<string>",description:"Space between the elements.",default:"none"},{property:"alignX",type:"`none, left, right, center`",description:"Horizontal alignment for the children",default:"none"},{property:"alignY",type:"`none, top, bottom, center`",description:"Vertical alignement for the children.",default:"none"},{property:"stretch",type:"boolean",description:"Stretch to fill space (vertical AND horizontal, useful if you want to change y alignment).",default:"false"}]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:(0,i.jsx)(n.a,{href:"#examples",children:"Examples"})}),"\n",(0,i.jsx)(n.h3,{id:"spacing",children:(0,i.jsx)(n.a,{href:"#spacing",children:"Spacing"})}),"\n",(0,i.jsxs)(n.p,{children:["This example shows how to use the ",(0,i.jsx)(n.code,{children:"space"})," property. You can see the large space between the elements."]}),"\n",(0,i.jsx)(a,{children:(0,i.jsx)(l,{})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Headline, Stack, Text } from \'@marigold/components\';\n\nexport const StackSpacing = () => (\n  <Stack space="large">\n    <Headline level="2">Header</Headline>\n    <Text>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse\n      dignissim dapibus elit, vel egestas felis pharetra non. Cras malesuada,\n      massa nec ultricies efficitur, lectus ante consequat magna, a porttitor\n      massa ex ut quam.\n    </Text>\n    <Text>\n      Phasellus ipsum tortor, aliquet dapibus fermentum in, mollis vel metus.\n      Vestibulum malesuada ante eu velit malesuada, nec ultricies sapien\n      finibus. Aenean rutrum in sem a ullamcorper. Integer ut euismod urna.\n      Interdum et malesuada fames ac ante ipsum primis in faucibus.\n    </Text>\n  </Stack>\n);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"nested",children:(0,i.jsx)(n.a,{href:"#nested",children:"Nested"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"<Stack>"})," component can also be nested in another ",(0,i.jsx)(n.code,{children:"<Stack>"}),". So you can build complex structures and constructs but without breaking layout."]}),"\n",(0,i.jsx)(a,{children:(0,i.jsx)(d,{})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Headline, Stack, Text } from \'@marigold/components\';\n\nexport const NestedStack = () => (\n  <Stack space="large">\n    <Stack space="medium">\n      <Headline level="2">Stack Content #1</Headline>\n      <Text>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</Text>\n      <Text>\n        Phasellus ipsum tortor, aliquet dapibus fermentum in, mollis vel metus.\n      </Text>\n    </Stack>\n    <Stack space="medium">\n      <Headline level="2">Stack Content #2</Headline>\n      <Text>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</Text>\n      <Text>\n        Phasellus ipsum tortor, aliquet dapibus fermentum in, mollis vel metus.\n      </Text>\n    </Stack>\n  </Stack>\n);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"horizontal-alignment",children:(0,i.jsx)(n.a,{href:"#horizontal-alignment",children:"Horizontal Alignment"})}),"\n",(0,i.jsxs)(n.p,{children:["The example shows the ",(0,i.jsx)(n.code,{children:"alignX"})," prop, which is used to align the children horizontal. Options are ",(0,i.jsx)(n.code,{children:"right"}),", ",(0,i.jsx)(n.code,{children:"center"})," and ",(0,i.jsx)(n.code,{children:"left"}),". Default is set to ",(0,i.jsx)(n.code,{children:"none"}),"."]}),"\n",(0,i.jsx)(a,{children:(0,i.jsx)(h,{})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Stack, Text } from \'@marigold/components\';\n\nexport const HorizontalStack = () => (\n  <>\n    <Stack space="medium">\n      <Text>Left</Text>\n    </Stack>\n    <Stack space="medium" alignX="center">\n      <Text>Center</Text>\n    </Stack>\n    <Stack space="medium" alignX="right">\n      <Text>Right</Text>\n    </Stack>\n  </>\n);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"vertical-alignment",children:(0,i.jsx)(n.a,{href:"#vertical-alignment",children:"Vertical Alignment"})}),"\n",(0,i.jsxs)(n.p,{children:["You can use the vertical alignment just with the ",(0,i.jsx)(n.code,{children:"stretch"})," prop when its set to true. The ",(0,i.jsx)(n.code,{children:"stretch"})," property stretches to fill the space of the element. With the vertical align you can align the children on ",(0,i.jsx)(n.code,{children:"top"}),", ",(0,i.jsx)(n.code,{children:"center"})," or ",(0,i.jsx)(n.code,{children:"bottom"}),". Default is set to ",(0,i.jsx)(n.code,{children:"none"}),"."]}),"\n",(0,i.jsx)(a,{children:(0,i.jsx)(p,{})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Box, Stack, Text } from '@marigold/components';\n\nexport const VerticalStack = () => (\n  <Box css={{ height: 200, bg: '#f1f3f5', p: 8 }}>\n    <Stack space=\"medium\" stretch alignY=\"bottom\">\n      <Text>Lirum</Text>\n      <Text>Larum</Text>\n      <Text>L\xf6ffelstiel!</Text>\n    </Stack>\n  </Box>\n);\n"})})]})}function o(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,s.ah)(),e.components),t=n.wrapper;return t?(0,i.jsx)(t,Object.assign({},e,{children:(0,i.jsx)(r,e)})):r(e)}}},function(e){e.O(0,[9774,2888,179],(function(){return n=8465,e(e.s=n);var n}));var n=e.O();_N_E=n}]);