{
    "componentChunkName": "component---src-pages-mdx-slug-tsx",
    "path": "/develop/scripts/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Scripts\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Scripts\"), mdx(\"p\", null, \"We use several scripts to make developing Marigold easier and more convenient.\"), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ yarn <script name>\"), \" in your favorite terminal.\"), mdx(\"h2\", null, \"Developing\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"start\")), mdx(\"p\", null, \"Boot up \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://storybook.js.org/\"\n  }, \"Storybook\"), \" to maintain or develop new components or themes. This tool is especially useful to debug or make visual changes, check if a11y rules are satisfied or make interactive \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://storybook.js.org/docs/react/writing-stories/play-function\"\n  }, \"play\"), \" examples.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"test (-w)\")), mdx(\"p\", null, \"Run the test suite. If you append \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-w\"), \" the suite will run in watch mode, meaning test that are affacted by your changes will be automatically re-run.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"docs\")), mdx(\"p\", null, \"Boot up the documentation website. This is helpful if you're writing or editing any documentation. Changes will be automatically detected and force a rebuild of the docs without you having to refresh the page in a browser.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"coverage\")), mdx(\"p\", null, \"Same as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"test\"), \" but will output a coverage report into your terminal.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"lint\")), mdx(\"p\", null, \"Run \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://eslint.org/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"eslint\")), \" to check if source files adhere our lint standards. We basically using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://create-react-app.dev/\"\n  }, \"CRA\"), \"'s rules which are very lax and won't unnecessarily annoy you.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"format\")), mdx(\"p\", null, \"Run \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://prettier.io/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"prettier\")), \" and format source files. We don't care how our source code is formated as long everyone uses the same format.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"typecheck\")), mdx(\"p\", null, \"Run the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/\"\n  }, \"TypeScript\"), \" compiler to find any inconsistent or wrong types.\"), mdx(\"h2\", null, \"Build\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"build\")), mdx(\"p\", null, \"Build all the packages.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"watch\")), mdx(\"p\", null, \"Build all the packages and rebuild them if any of their source files change.\"), mdx(\"h2\", null, \"Release\"), mdx(\"p\", null, \"If you want to know how to release Marigold, go to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./release\"\n  }, \"Release\"), \" page.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"release:status\")), mdx(\"p\", null, \"Check the release status of all packages.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"release:version\")), mdx(\"p\", null, \"Bump the version based on your changesets.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"release:publish\")), mdx(\"p\", null, \"Build and release packages to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \".\"), mdx(\"h2\", null, \"Troubleshoot\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"clean\")), mdx(\"p\", null, \"Sometimes node modules have hick ups. This command will remove all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_module\"), \" and build folders so that you have a clean repo like you just git cloned it.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"clean:build\")), mdx(\"p\", null, \"Same as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clean\"), \" except it will only remove all build folders.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"postinstall\")), mdx(\"p\", null, \"You don't ever have to run this is script. Basically, it will remove typings of toolings we use that uses an old version of emotion which causes loads of false-positive type errors in your project.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Scripts"},"headings":[{"value":"Scripts"}]}},"pageContext":{"id":"01dbffe4-06ca-5a6b-91f6-f3b774b93e87","slug":"develop/scripts","__params":{"slug":"develop"}}},
    "staticQueryHashes": ["3402178641"]}