{
    "componentChunkName": "component---src-pages-mdx-slug-tsx",
    "path": "/introduction/getting-started/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting Started\",\n  \"caption\": \"This page describes how to get started building an application with Marigold.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Getting Started\"), mdx(\"h2\", null, \"What is Marigold?\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Marigold\"), \" is a React implementation of Reservix' design language. It provides a  declarative way to build user interfaces which are adaptive to screen sizes across devices and are accessibility.\"), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"To install Marigold you can use package managers like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://yarnpkg.com/\"\n  }, \"yarn\"), \" or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/\"\n  }, \"npm\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"With npm\"), \" \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"npm install @marigold/components\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"With yarn:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"yarn add @marigold/components\\n\")), mdx(\"p\", null, \"In addition to the components, you usually want to install a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/introduction/theming\"\n  }, \"theme\"), \".\"), mdx(\"p\", null, \"\\uD83D\\uDCAC  Please note that \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/react\"\n  }, \"react\"), \" >= 17.0.0 and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/react-dom\"\n  }, \"react-dom\"), \" >= 17.0.0 are peer dependencies.\"), mdx(\"h2\", null, \"Tooling\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Marigold\"), \" works with popular build tools, like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://webpack.js.org/\"\n  }, \"webpack\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://rollupjs.org/\"\n  }, \"rollup\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://esbuild.github.io/\"\n  }, \"esbuild\"), \".\"), mdx(\"p\", null, \"If you are using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/\"\n  }, \"TypeScript\"), \" to build your app, be sure to add \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/@types/react\"\n  }, \"@types/react\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/@types/react-dom\"\n  }, \"@types/react-dom\"), \" to your project. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Marigold\"), \" is written in TypeScript and Marigold components are published with their type definitions, so that you can take advantage of static type checking and IDE autocomplete.\"), mdx(\"h2\", null, \"Bootstrapping\"), mdx(\"p\", null, \"For \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Marigold\"), \" to work correctly, you need to wrap your app with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MarigoldProvider\"), \". This way \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Marigold\"), \" components will be able to access predefined styles and SSR will work out of the box.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"import React from 'react';\\nimport { Button, MarigoldProvider } from '@marigold/components';\\nimport theme from '@marigold/theme-unicorn';\\n\\nconst App = () =>  (\\n  <MarigoldProvider theme={theme}>\\n    <Button variant=\\\"primary\\\" onClick={alert('Hey there!')}>\\n      Hello World\\n    </Button>\\n  </MarigoldProvider>\\n);\\n\")), mdx(\"p\", null, \"See the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../components/provider\"\n  }, \"Provider\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../components/button\"\n  }, \"Button\"), \" docs for more information about the components used in this example.\"), mdx(\"h2\", null, \"Next Steps\"), mdx(\"p\", null, \"Now that you've bootstrapped your app, you can read the documentation for the available components to understand them in detail. We also have high level documentation about topics like \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TODO!\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Getting Started"},"headings":[{"value":"Getting Started"}]}},"pageContext":{"id":"1441416b-c865-5d27-b8af-6eee66dfb534","slug":"introduction/getting-started","__params":{"slug":"introduction"}}},
    "staticQueryHashes": ["3402178641"]}