{
    "componentChunkName": "component---src-pages-mdx-slug-tsx",
    "path": "/introduction/03-theming/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Theming\",\n  \"caption\": \"This page explains how themes workd and how to use them.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Theming\"), mdx(\"p\", null, \"Themes are used to define the visual appearance of the application and adhere the coporate identity.\"), mdx(\"p\", null, \"In Marigold a theme is a plain object that defines \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.lightningdesignsystem.com/design-tokens/\"\n  }, \"design tokens\"), \" for the context in which it should be used (e.g. B2B or B2C), including a color palette, the typography, scales for white space and size related values. A theme also comes with styles for the app's components.\"), mdx(\"p\", null, \"Marigold's themes are based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://theme-ui.com/theme-spec/\"\n  }, \"Theme UI's Theme Specification\"), \" with the addition of styles for all components (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.<component name>\"), \").\"), mdx(\"h2\", null, \"Using an existing theme\"), mdx(\"p\", null, \"There are currently two themes available:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"B2B\"), \": The default theme for B2B use cases.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Core\"), \": The theme for applications that life inside Reservix CORE application.\")), mdx(\"p\", null, \"To install a theme you can use the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"    yarn add @marigold/theme-<lowercease theme name>\\n\")), mdx(\"p\", null, \"Afterwards pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<MarigoldProvider>\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"import React from 'react';\\nimport { MarigoldProvider } from '@marigold/components';\\nimport theme from '@marigold/theme-b2b';\\n\\nconst App = () =>  (\\n  <MarigoldProvider theme={theme}>\\n    {/* App code goes here */}\\n  </MarigoldProvider>\\n);\\n\")), mdx(\"p\", null, \"Most themes are also using custom fonts. How you do make them available for your users depends on your setup (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://create-react-app.dev/\"\n  }, \"CRA\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nextjs.org/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"next.js\")), \", ...).\"), mdx(\"p\", null, \"The URL to load the fonts can be imported via the respective theme package. The following examples shows how to load fonts in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"next.js\"), \" app. This also supports the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nextjs.org/docs/basic-features/font-optimization\"\n  }, \"font optimization\"), \" feature of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"next.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"// pages/_document.js\\n\\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\\nimport { webFontUrl } from '@marigold/theme-b2b';\\n\\nclass MyDocument extends Document {\\n  render() {\\n    return (\\n      <Html>\\n        <Head>\\n          {webFontUrl.map(url => (\\n            <link key={url} rel=\\\"stylesheet\\\" href={url} />\\n          ))}\\n        </Head>\\n        <body>\\n          <Main />\\n          <NextScript />\\n        </body>\\n      </Html>\\n    );\\n  }\\n}\\n\\nexport default MyDocument;\\n\")), mdx(\"p\", null, \"In other setup you might need to use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/nfl/react-helmet\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"react-helmet\")), \" or can paste the fonts directly into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<head>\"), \" of your HTML.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Theming"},"headings":[{"value":"Theming"}]}},"pageContext":{"id":"2f5cc8d2-7d87-5cab-b935-8ddff4d030af","slug":"introduction/03-theming","__params":{"slug":"introduction"}}},
    "staticQueryHashes": ["2300692853","3402178641"]}