{
    "componentChunkName": "component---src-pages-mdx-slug-tsx",
    "path": "/components/switch/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Switch\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar MarigoldTheme = makeShortcode(\"MarigoldTheme\");\nvar Switch = makeShortcode(\"Switch\");\nvar Stack = makeShortcode(\"Stack\");\nvar Box = makeShortcode(\"Box\");\nvar Card = makeShortcode(\"Card\");\nvar Inline = makeShortcode(\"Inline\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Switch\"), mdx(\"p\", null, \"The Switch component allows the users to select between two states, e.g. on and off.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"It consists of a visual selection indicator and a label.\\nUsers may click or touch a Switch to toggle the state, or use the Tab key to navigate to it and the Space key to toggle it.\"), mdx(MarigoldTheme, {\n    mdxType: \"MarigoldTheme\"\n  }, mdx(Switch, {\n    \"aria-label\": \"demo-switch\",\n    mdxType: \"Switch\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"import { Switch } from '@marigold/components';\\n\")), mdx(FigmaLink, {\n    to: 'https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=2458%3A2254',\n    mdxType: \"FigmaLink\"\n  }), mdx(\"h2\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\"), \" (optional)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"__default\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"labelVariant\"), \" (optional)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"above\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\"), \" (optional)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"))))), mdx(\"h2\", null, \"Examples\"), mdx(\"h3\", null, \"Default\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"expandCode\",\n    \"expandCode\": true\n  }, \"<Switch>Default Switch</Switch>\\n\")), mdx(\"h3\", null, \"Active\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Switch defaultSelected>Active Switch</Switch>\\n\")), mdx(\"h3\", null, \"Disabled\"), mdx(\"p\", null, \"In this mode the user can not change the status of the switch.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Switch disabled>Disabled Switch</Switch>\\n\")), mdx(\"h3\", null, \"Disabled (active)\"), mdx(\"p\", null, \"This mode can be used when an option is or was already active and there is a variable that does not allow the user switch to be moved from its \\\"on\\\" mode.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Switch defaultSelected disabled>\\n  Disabled active Switch\\n</Switch>\\n\")), mdx(\"h2\", null, \"Dos & Don'ts\"), mdx(Stack, {\n    space: \"small\",\n    mdxType: \"Stack\"\n  }, mdx(Box, {\n    display: \"grid\",\n    css: {\n      gridGap: 'small',\n      gridTemplateColumns: 'repeat(auto-fit, minmax(min(500px, 100%), 1fr))'\n    },\n    mdxType: \"Box\"\n  }, mdx(DoAndDont, {\n    preview: mdx(Card, {\n      mdxType: \"Card\"\n    }, mdx(Stack, {\n      space: \"xsmall\",\n      mdxType: \"Stack\"\n    }, mdx(Inline, {\n      space: \"small\",\n      mdxType: \"Inline\"\n    }, mdx(Switch, {\n      defaultSelected: true,\n      \"aria-label\": \"option1\",\n      mdxType: \"Switch\"\n    }), \"Activate Option Number 1\"), mdx(Inline, {\n      space: \"small\",\n      mdxType: \"Inline\"\n    }, mdx(Switch, {\n      defaultSelected: true,\n      \"aria-label\": \"backup\",\n      mdxType: \"Switch\"\n    }), \"Create a Backup\"), mdx(Inline, {\n      space: \"small\",\n      mdxType: \"Inline\"\n    }, mdx(Switch, {\n      \"aria-label\": \"pw-change\",\n      mdxType: \"Switch\"\n    }), \"Allow password changing\"))),\n    mdxType: \"DoAndDont\"\n  }, \"Use a clear text that indicates what will be on or off when changing the status of the switch.\"), mdx(DoAndDont, {\n    dont: true,\n    preview: mdx(Card, {\n      mdxType: \"Card\"\n    }, \"Do you want to turn off the automatic elimination of items?\", mdx(Switch, {\n      defaultSelected: true,\n      \"aria-label\": \"switch-dont\",\n      mdxType: \"Switch\"\n    })),\n    mdxType: \"DoAndDont\"\n  }, \"Do not write confusing questions. It should be clear what is active or inactive.\"), mdx(DoAndDont, {\n    dont: true,\n    preview: mdx(Card, {\n      mdxType: \"Card\"\n    }, mdx(Inline, {\n      space: \"small\",\n      mdxType: \"Inline\"\n    }, mdx(Switch, {\n      defaultSelected: true,\n      \"aria-label\": \"switch-dont-2\",\n      mdxType: \"Switch\"\n    }), \"Agree to terms\")),\n    mdxType: \"DoAndDont\"\n  }, \"Do not use Switches if an error state exists. Switches, unlike checkboxes, can't have an error state.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Switch"},"headings":[{"value":"Switch"}]}},"pageContext":{"id":"1566bb43-7f7b-50c2-99b2-ce62bd7a3829","slug":"components/switch","__params":{"slug":"components"}}},
    "staticQueryHashes": ["2300692853","3402178641"]}