{
    "componentChunkName": "component---src-pages-mdx-slug-tsx",
    "path": "/components/checkbox/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Checkbox\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar MarigoldTheme = makeShortcode(\"MarigoldTheme\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Checkbox\"), mdx(\"h2\", null, \"Demo\"), mdx(MarigoldTheme, {\n    mdxType: \"MarigoldTheme\"\n  }, mdx(Inline, {\n    space: \"medium\",\n    mdxType: \"Inline\"\n  }, mdx(Checkbox, {\n    id: \"unchecked\",\n    \"aria-label\": \"unchecked\",\n    mdxType: \"Checkbox\"\n  }), mdx(Checkbox, {\n    id: \"disabled\",\n    \"aria-label\": \"disabled\",\n    disabled: true,\n    mdxType: \"Checkbox\"\n  }), mdx(Checkbox, {\n    id: \"checked\",\n    \"aria-label\": \"checked\",\n    checked: true,\n    mdxType: \"Checkbox\"\n  }), mdx(Checkbox, {\n    id: \"disabled-checked\",\n    \"aria-label\": \"disabled-checked\",\n    checked: true,\n    disabled: true,\n    mdxType: \"Checkbox\"\n  }), mdx(Checkbox, {\n    id: \"indeterminated-checked\",\n    \"aria-label\": \"indeterminated-checked\",\n    checked: true,\n    indeterminated: true,\n    mdxType: \"Checkbox\"\n  }))), mdx(\"h2\", null, \"Description\"), mdx(\"p\", null, \"Checkboxes allow users to select multiple items from a list of individual items,\\nor to mark one individual item as selected.\"), mdx(FigmaLink, {\n    to: 'https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=467%3A159',\n    mdxType: \"FigmaLink\"\n  }), mdx(\"h2\", null, \"Properties\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\"), \" (optional)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"__default\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"labelVariant\"), \" (optional)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"inline\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"required\"), \" (optional)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\"), \" (optional)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"indeterminated\"), \" (optional)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"error\"), \" (optional)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"errorMessage\"), \" (optional)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  })))), mdx(\"h2\", null, \"Import\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"import { Checkbox } from '@marigold/components';\\n\")), mdx(\"h2\", null, \"Types\"), mdx(\"h3\", null, \"Checkbox standard labeled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"expandCode\",\n    \"expandCode\": true\n  }, \"() => {\\n  const [isChecked, setChecked] = React.useState(false);\\n  const onChange = () => {\\n    setChecked(!isChecked);\\n  };\\n  return (\\n    <Checkbox\\n      id=\\\"standard\\\"\\n      name=\\\"standard\\\"\\n      onChange={onChange}\\n      checked={isChecked}\\n      value=\\\"Checkbox\\\"\\n    >\\n      Agree to Marigold terms\\n    </Checkbox>\\n  );\\n};\\n\")), mdx(\"h3\", null, \"Checkbox disabled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<>\\n  <Checkbox id=\\\"disabled\\\" disabled>\\n    Disabled\\n  </Checkbox>\\n  <br />\\n  <Checkbox id=\\\"checkedDisabled\\\" checked disabled>\\n    Checked and disabled\\n  </Checkbox>\\n</>\\n\")), mdx(\"h3\", null, \"Checkbox required label\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Checkbox checked id=\\\"required\\\" value=\\\"required\\\" required>\\n  Agree to Marigold terms\\n</Checkbox>\\n\")), mdx(\"h3\", null, \"Checkbox error and errorMessage\"), mdx(\"p\", null, \"Use the error and errorMesssage prop together\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Checkbox\\n  id=\\\"error\\\"\\n  value=\\\"error\\\"\\n  error\\n  errorMessage=\\\"Please check the required checkbox\\\"\\n  required\\n>\\n  Agree to Marigold terms\\n</Checkbox>\\n\")), mdx(\"h3\", null, \"Indeterminated Checkbox\"), mdx(\"p\", null, \"Use indeterminate state when it represents both selected and not selected values.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Checkbox id=\\\"selectAll\\\" checked indeterminated>\\n  Select all\\n</Checkbox>\\n\")), mdx(\"h2\", null, \"Usage\"), mdx(Stack, {\n    space: \"small\",\n    mdxType: \"Stack\"\n  }, mdx(Box, {\n    display: \"grid\",\n    css: {\n      gridGap: 'small',\n      gridTemplateColumns: 'repeat(auto-fit, minmax(min(500px, 100%), 1fr))'\n    },\n    mdxType: \"Box\"\n  }, mdx(DoAndDont, {\n    preview: mdx(Card, {\n      mdxType: \"Card\"\n    }, mdx(Stack, {\n      mdxType: \"Stack\"\n    }, mdx(Checkbox, {\n      id: \"blue\",\n      checked: true,\n      mdxType: \"Checkbox\"\n    }, \"Blue\"), mdx(Checkbox, {\n      id: \"red\",\n      checked: true,\n      mdxType: \"Checkbox\"\n    }, \"Red\"), mdx(Checkbox, {\n      id: \"yellow\",\n      mdxType: \"Checkbox\"\n    }, \"Yellow\"))),\n    mdxType: \"DoAndDont\"\n  }, \"Use checkboxes to allow users to select one or more options from a list.\"), mdx(DoAndDont, {\n    preview: mdx(Card, {\n      mdxType: \"Card\"\n    }, mdx(Stack, {\n      space: \"medium\",\n      mdxType: \"Stack\"\n    }, mdx(Checkbox, {\n      id: \"select\",\n      value: \"error\",\n      checked: true,\n      indeterminated: true,\n      mdxType: \"Checkbox\"\n    }, \"Select all colors\"), mdx(Stack, {\n      mdxType: \"Stack\"\n    }, mdx(Checkbox, {\n      id: \"blue\",\n      checked: true,\n      mdxType: \"Checkbox\"\n    }, \"Blue\"), mdx(Checkbox, {\n      id: \"red\",\n      checked: true,\n      mdxType: \"Checkbox\"\n    }, \"Red\"), mdx(Checkbox, {\n      id: \"yellow\",\n      mdxType: \"Checkbox\"\n    }, \"Yellow\")))),\n    mdxType: \"DoAndDont\"\n  }, \"Use a checkbox to select all values. When multiple values that are not identical are represented, the checkbox should appear in the indeterminate state.\"), mdx(DoAndDont, {\n    dont: true,\n    preview: mdx(Card, {\n      mdxType: \"Card\"\n    }, mdx(Columns, {\n      space: \"small\",\n      mdxType: \"Columns\"\n    }, mdx(Column, {\n      width: 9,\n      mdxType: \"Column\"\n    }, \"Activate Option Number 1\"), mdx(Column, {\n      width: 3,\n      mdxType: \"Column\"\n    }, mdx(Checkbox, {\n      id: \"option\",\n      checked: true,\n      \"aria-label\": \"option\",\n      mdxType: \"Checkbox\"\n    })), mdx(Column, {\n      width: 9,\n      mdxType: \"Column\"\n    }, \"Create a Backup\"), mdx(Column, {\n      width: 3,\n      mdxType: \"Column\"\n    }, mdx(Checkbox, {\n      id: \"backup\",\n      checked: true,\n      \"aria-label\": \"backup\",\n      mdxType: \"Checkbox\"\n    })), mdx(Column, {\n      width: 9,\n      mdxType: \"Column\"\n    }, \"Allow password changing\"), mdx(Column, {\n      width: 3,\n      mdxType: \"Column\"\n    }, mdx(Checkbox, {\n      id: \"pw\",\n      checked: true,\n      \"aria-label\": \"pw\",\n      mdxType: \"Checkbox\"\n    })))),\n    mdxType: \"DoAndDont\"\n  }, \"Do not use checkboxes to replace a switch.\"), mdx(DoAndDont, {\n    dont: true,\n    preview: mdx(Card, {\n      mdxType: \"Card\"\n    }, mdx(Text, {\n      as: \"h5\",\n      variant: \"headline5\",\n      mdxType: \"Text\"\n    }, \"Select your answer\"), mdx(Columns, {\n      space: \"small\",\n      mdxType: \"Columns\"\n    }, mdx(Column, {\n      width: 9,\n      mdxType: \"Column\"\n    }, \"Yes\"), mdx(Column, {\n      width: 3,\n      mdxType: \"Column\"\n    }, mdx(Checkbox, {\n      id: \"yes\",\n      checked: true,\n      \"aria-label\": \"yes\",\n      mdxType: \"Checkbox\"\n    })), mdx(Column, {\n      width: 9,\n      mdxType: \"Column\"\n    }, \"No\"), mdx(Column, {\n      width: 3,\n      mdxType: \"Column\"\n    }, mdx(Checkbox, {\n      id: \"no\",\n      checked: true,\n      \"aria-label\": \"no\",\n      mdxType: \"Checkbox\"\n    })), mdx(Column, {\n      width: 9,\n      mdxType: \"Column\"\n    }, \"I am not sure\"), mdx(Column, {\n      width: 3,\n      mdxType: \"Column\"\n    }, mdx(Checkbox, {\n      id: \"not-sure\",\n      checked: true,\n      \"aria-label\": \"not-sure\",\n      mdxType: \"Checkbox\"\n    })))),\n    mdxType: \"DoAndDont\"\n  }, \"Do not use checkboxes to replace a radio.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Checkbox"},"headings":[{"value":"Checkbox"}]}},"pageContext":{"id":"fd0dd65e-6191-5516-bc64-ce7d3c5aa6b2","slug":"components/checkbox","__params":{"slug":"components"}}},
    "staticQueryHashes": ["2300692853","3402178641"]}