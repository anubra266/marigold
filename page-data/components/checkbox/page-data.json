{
    "componentChunkName": "component---src-pages-mdx-slug-tsx",
    "path": "/components/checkbox/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Checkbox\",\n  \"figma\": \"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=467%3A159\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar MarigoldTheme = makeShortcode(\"MarigoldTheme\");\nvar Checkbox = makeShortcode(\"Checkbox\");\nvar Stack = makeShortcode(\"Stack\");\nvar Box = makeShortcode(\"Box\");\nvar Card = makeShortcode(\"Card\");\nvar Headline = makeShortcode(\"Headline\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Checkbox\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Checkbox\"), \" component allows users to select one or more options from a set of options. In order to group multiple checkboxes, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CheckboxGroup\"), \" component.\"), mdx(MarigoldTheme, {\n    mdxType: \"MarigoldTheme\"\n  }, mdx(Checkbox, {\n    defaultChecked: true,\n    mdxType: \"Checkbox\"\n  }, \"I will not talk about Fight Club\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"import { Checkbox, CheckboxGroup } from '@marigold/components';\\n\")), mdx(\"h2\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Use a different \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"variant\"), \" from theme\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"size\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'level-1'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Use a different \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"size\"), \" from theme\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"error\"), \" (optional)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the checkbox is considered invalid and if set the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"errorMessage\"), \" is shown instead of the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"description\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"...\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Yes you can use all regular attributes of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"input\"), \"!\")))), mdx(\"h2\", null, \"Examples\"), mdx(\"h3\", null, \"Simple Checkbox\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Checkbox>Agree to business terms</Checkbox>\\n\")), mdx(\"h3\", null, \"Checkbox disabled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<>\\n  <Checkbox disabled>Disabled</Checkbox>\\n  <br />\\n  <Checkbox checked disabled>\\n    Checked and disabled\\n  </Checkbox>\\n</>\\n\")), mdx(\"h3\", null, \"Indeterminate Checkbox\"), mdx(\"p\", null, \"Use indeterminate state when it represents both selected and not selected values.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Checkbox defaultChecked indeterminate>\\n  Select all\\n</Checkbox>\\n\")), mdx(\"h3\", null, \"Group checkboxes\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"() => {\\n  const [selected, setSelected] = React.useState([]);\\n  return (\\n    <>\\n      <CheckboxGroup label=\\\"Choose your toppings:\\\" onChange={setSelected}>\\n        <Checkbox value=\\\"ham\\\">\\uD83D\\uDC16 Ham</Checkbox>\\n        <Checkbox value=\\\"beef\\\" disabled>\\n          \\uD83D\\uDC04 Beef (out of stock)\\n        </Checkbox>\\n        <Checkbox value=\\\"tuna\\\">\\uD83D\\uDC1F Tuna</Checkbox>\\n        <Checkbox value=\\\"tomatos\\\">\\uD83C\\uDF45 Tomatos</Checkbox>\\n        <Checkbox value=\\\"onions\\\">\\uD83E\\uDDC5 Onions</Checkbox>\\n        <Checkbox value=\\\"pineapple\\\">\\uD83C\\uDF4D Pineapple</Checkbox>\\n      </CheckboxGroup>\\n      <hr />\\n      <pre>Selected values: {selected.join(', ')}</pre>\\n    </>\\n  );\\n};\\n\")), mdx(\"h2\", null, \"Dos & Don'ts\"), mdx(Stack, {\n    space: \"small\",\n    mdxType: \"Stack\"\n  }, mdx(Box, {\n    display: \"grid\",\n    css: {\n      gridGap: 'small',\n      gridTemplateColumns: 'repeat(auto-fit, minmax(min(500px, 100%), 1fr))'\n    },\n    mdxType: \"Box\"\n  }, mdx(DoAndDont, {\n    preview: mdx(Card, {\n      mdxType: \"Card\"\n    }, mdx(Stack, {\n      mdxType: \"Stack\"\n    }, mdx(Checkbox, {\n      id: \"blue\",\n      checked: true,\n      mdxType: \"Checkbox\"\n    }, \"Blue\"), mdx(Checkbox, {\n      id: \"red\",\n      checked: true,\n      mdxType: \"Checkbox\"\n    }, \"Red\"), mdx(Checkbox, {\n      id: \"yellow\",\n      mdxType: \"Checkbox\"\n    }, \"Yellow\"))),\n    mdxType: \"DoAndDont\"\n  }, \"Use checkboxes to allow users to select one or more options from a list.\"), mdx(DoAndDont, {\n    preview: mdx(Card, {\n      mdxType: \"Card\"\n    }, mdx(Stack, {\n      space: \"medium\",\n      mdxType: \"Stack\"\n    }, mdx(Checkbox, {\n      id: \"select\",\n      value: \"error\",\n      checked: true,\n      indeterminated: true,\n      mdxType: \"Checkbox\"\n    }, \"Select all colors\"), mdx(Stack, {\n      mdxType: \"Stack\"\n    }, mdx(Checkbox, {\n      id: \"blue\",\n      checked: true,\n      mdxType: \"Checkbox\"\n    }, \"Blue\"), mdx(Checkbox, {\n      id: \"red\",\n      checked: true,\n      mdxType: \"Checkbox\"\n    }, \"Red\"), mdx(Checkbox, {\n      id: \"yellow\",\n      mdxType: \"Checkbox\"\n    }, \"Yellow\")))),\n    mdxType: \"DoAndDont\"\n  }, \"Use a checkbox to select all values. When multiple values that are not identical are represented, the checkbox should appear in the indeterminate state.\"), mdx(DoAndDont, {\n    dont: true,\n    preview: mdx(Card, {\n      mdxType: \"Card\"\n    }, mdx(Stack, {\n      space: \"xsmall\",\n      mdxType: \"Stack\"\n    }, mdx(Checkbox, {\n      id: \"option\",\n      checked: true,\n      \"aria-label\": \"option\",\n      mdxType: \"Checkbox\"\n    }, \"Activate Option Number 1\"), mdx(Checkbox, {\n      id: \"option\",\n      checked: true,\n      \"aria-label\": \"option\",\n      mdxType: \"Checkbox\"\n    }, \"Create a Backup\"), mdx(Checkbox, {\n      id: \"option\",\n      checked: true,\n      \"aria-label\": \"option\",\n      mdxType: \"Checkbox\"\n    }, \"Allow password changing\"))),\n    mdxType: \"DoAndDont\"\n  }, \"Do not use checkboxes to replace a switch.\"), mdx(DoAndDont, {\n    dont: true,\n    preview: mdx(Card, {\n      mdxType: \"Card\"\n    }, mdx(Stack, {\n      space: \"xsmall\",\n      mdxType: \"Stack\"\n    }, mdx(Headline, {\n      level: \"5\",\n      mdxType: \"Headline\"\n    }, \"Select your answer\"), mdx(Checkbox, {\n      id: \"yes\",\n      checked: true,\n      \"aria-label\": \"yes\",\n      mdxType: \"Checkbox\"\n    }, \"Yes\"), mdx(Checkbox, {\n      id: \"no\",\n      checked: true,\n      \"aria-label\": \"no\",\n      mdxType: \"Checkbox\"\n    }, \"No\"), mdx(Checkbox, {\n      id: \"not-sure\",\n      checked: true,\n      \"aria-label\": \"not-sure\",\n      mdxType: \"Checkbox\"\n    }, \"I am not sure\"))),\n    mdxType: \"DoAndDont\"\n  }, \"Do not use checkboxes to replace a radio.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Checkbox"},"headings":[{"value":"Checkbox"}]}},"pageContext":{"id":"5f613191-6091-52d3-984a-cbdd395c9602","slug":"components/checkbox","__params":{"slug":"components"}}},
    "staticQueryHashes": ["2300692853","3402178641"]}