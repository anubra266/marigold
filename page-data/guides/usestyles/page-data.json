{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/guides/usestyles/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"useStyles\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Styling with useStyles\"), mdx(\"p\", null, \"Marigold components come with unopiniated styling, so that you can apply the theme of your choice and add custom styles through variants and additional classes.\"), mdx(\"h2\", null, \"useStyles Hook\"), mdx(\"p\", null, \"In order to apply styles other than the variant styles of a component, you can make use of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useStyles\"), \" hook. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useStyles\"), \" takes the following arguments (all of them are optional):\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"element\"), \" (ElementType): applying reset styles for the given HTML element\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"css\"), \" (CSSObject): custom styles for the component\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"variant\"), \" (string | string[]): single variant name from the theme (or list of variant names)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"className\"), \" (string): elsewhere defined classnames can be included here\")), mdx(\"p\", null, \"This hook generates classnames that include the styles. This list of classnames is then given to the component via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"classNames\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"code\",\n    \"code\": true\n  }, \"import { ThemeProvider, useStyles } from '@marigold/system'\\nimport { Text } from '@marigold/components'\\n\\nconst theme = {\\n    text: {\\n        body: {\\n            fontSize: '11px',\\n            marginTop: '4px',\\n        }\\n    }\\n}\\n\\nconst custom = useStyles({\\n    css: {\\n        color: 'hotpink',\\n    }\\n})\\n\\nconst classNames = useStyles({\\n    element: 'p', // reset styles\\n    css: {\\n        marginTop: '16px', // custom styles\\n    },\\n    variant: 'text.body', // take additional variant styles from theme\\n    className: custom, // other className with other styles generated with useStyles\\n})\\n\\n<ThemeProvider theme={theme}>\\n    <Text as=\\\"p\\\" classNames={classNames}>Hello World</Text>\\n</ThemeProvider>\\n\")), mdx(\"h2\", null, \"Order of Styles\"), mdx(\"p\", null, \"Styles override each other in case a value changes in a later applied argument of useStyles. The styles are applied in the order of the arguments \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useStyles\"), \" takes.\"), mdx(\"p\", null, \"Read more about themes and variants in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/foundation/themes-variants\"\n  }, \"Foundation: Theme & Variants\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"useStyles"},"headings":[{"value":"Styling with useStyles"}]}},"pageContext":{"id":"d5b62d06-fe2f-526a-af98-73820ff4022f","slug":"guides/usestyles","__params":{"slug":"guides"}}},"staticQueryHashes":["3402178641"]}