{
    "componentChunkName": "component---src-pages-mdx-slug-tsx",
    "path": "/foundation/box-primitive/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Box Primitive\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Box Primitive\"), mdx(\"h2\", null, \"Box as Layout Component\"), mdx(\"p\", null, \"As the basis of all our components, we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Box>\"), \". It is a versatile component that\\ncan be modified with style props as listed in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../components/box\"\n  }, \"Box component\"), \" description.\\nAdditionally, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \" prop to define custom styles in your themes. With the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"as\"), \" prop, you\\ndetermine the rendered HTML element. Instead of exposing the underlying tools that will create CSS, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Box>\"), \" component\\nwraps them and exposes an API for applying styling to a component while respecting the rules and constraints of our design\\nsystem.\"), mdx(\"h2\", null, \"Import and Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"import { Box } from '@marigold/components';\\n\")), mdx(\"p\", null, \"Button box with backgroundColor, button variant and padding:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"expandCode\",\n    \"expandCode\": true\n  }, \"<Box as=\\\"button\\\" bg=\\\"primary\\\" variant=\\\"button.primary\\\" p=\\\"8px\\\">\\n  Custom Button\\n</Box>\\n\")), mdx(\"h2\", null, \"Building a custom Component with the Box\"), mdx(\"p\", null, \"In case you want to build your own custom component, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" as the underlying component and add\\nthe styles accordingly. You can stack and nest multiple Box instances and build your complex component like this.\"), mdx(\"p\", null, \"By default, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" component will render a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div />\"), \". This might be fine most of the times, but sometimes you would\\nrather render a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<button>\"), \" or an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<input>\"), \" etc. To allow this, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" takes the special prop called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"as\"), \", accepting\\nall HTML tag names as input. Don't forget to define variants. You can also define two variants in the theme.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"export type ButtonProps = {\\n  variant?: string;\\n  size?: string;\\n} & ComponentPropsWithRef<'button'>;\\n\\nexport const Button: React.FC<ButtonProps> = ({\\n  variant = 'primary',\\n  size = 'large',\\n  children,\\n  ...props\\n}) => {\\n  return (\\n    <Box\\n      as=\\\"button\\\"\\n      variant={[`button.${variant}`, `button.${size}`]}\\n      {...props}\\n    >\\n      <Box as=\\\"span\\\" display=\\\"inline-flex\\\" alignItems=\\\"center\\\">\\n        {children}\\n      </Box>\\n    </Box>\\n  );\\n};\\n\")), mdx(\"h2\", null, \"Style priority order\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"_\", \"_\", \"baseCSS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"variant\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"styleProps\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"css prop\")), mdx(\"h2\", null, \"_\", \"_\", \"baseCSS\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__baseCSS\"), \" prop is internal and only for writing Marigold components.\\nYou can set component base styles which are applied on every component instance.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"<Box\\n  __baseCSS={{\\n    display: 'flex'\\n    alignItems= 'center'\\n    justifyContent='space-between'\\n  }}\\n>\\n  ...\\n</Box>\\n\")), mdx(\"h2\", null, \"Variant\"), mdx(\"p\", null, \"In most cases the right choice to style components for an application or a specific context is with the variant prop.\\nLearn more about variants and how to use them on this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./themes-variants\"\n  }, \"page\"), \".\"), mdx(\"h2\", null, \"StyleProps\"), mdx(\"p\", null, \"StyleProps are convenience helpers to style an instance.\\nLook at the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../components/box\"\n  }, \"Box component\"), \" to see which props are usable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"<Box\\n  as=\\\"button\\\"\\n  variant={`button.${variant}`}\\n  display=\\\"flex\\\"\\n  p=\\\"16px\\\"\\n  border=\\\"1px solid\\\"\\n>\\n  ...\\n</Box>\\n\")), mdx(\"h2\", null, \"Custom CSS\"), mdx(\"p\", null, \"Staying inside the boundaries of the design system and its contraints should be the norm. But as limiting styling only\\nto allowed values defined by the system can be very restrictive, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"css\"), \" prop and generate custom\\nstyles.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"onlyCode\",\n    \"onlyCode\": true\n  }, \"<Box\\n  as=\\\"button\\\"\\n  variant={`button.${variant}`}\\n  css={{ fontSize: '16px', color = 'orange' }}\\n  {...props}\\n>\\n  ...\\n</Box>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Box Primitive"},"headings":[{"value":"Box Primitive"}]}},"pageContext":{"id":"0c192ce5-00b3-5676-9e37-d1ea46c8ea05","slug":"foundation/box-primitive","__params":{"slug":"foundation"}}},
    "staticQueryHashes": ["3402178641"]}