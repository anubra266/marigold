{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../lib/config.ts"],
  "sourcesContent": ["import {\n  defineDocumentType,\n  makeSource,\n  type FieldDefs,\n} from 'contentlayer/source-files';\n\nimport remarkGfm from 'remark-gfm';\nimport rehypeSlug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\n\nimport { siteConfig } from './lib/config';\n\n// Helpers\n// ---------------\nconst commonFields: FieldDefs = {\n  title: {\n    type: 'string',\n    required: true,\n  },\n  caption: {\n    type: 'string',\n    required: true,\n  },\n};\n\n// Page Types\n// ---------------\nexport const ContentPage = defineDocumentType(() => ({\n  name: 'ContentPage',\n  filePathPattern: 'pages/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    ...commonFields,\n    order: {\n      type: 'number',\n    },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: doc => doc._raw.flattenedPath.replace('pages', ''),\n    },\n    slugAsParams: {\n      type: 'string',\n      resolve: doc => doc._raw.flattenedPath.split('/').slice(1).join('/'),\n    },\n  },\n}));\n\nexport const ComponentPage = defineDocumentType(() => ({\n  name: 'ComponentPage',\n  filePathPattern: 'components/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    ...commonFields,\n    group: {\n      type: 'enum',\n      options: siteConfig.navigation.componentGroups,\n      required: true,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: doc =>\n        `/${doc._raw.flattenedPath.substring(\n          0,\n          doc._raw.flattenedPath.lastIndexOf('/')\n        )}`,\n    },\n    slugAsParams: {\n      type: 'string',\n      // Slugs are matched agains the name of the component or rather the file name\n      resolve: doc => doc._raw.sourceFileName.split('.')[0],\n    },\n  },\n}));\n\n// Config\n// ---------------\nexport default makeSource({\n  contentDirPath: './content',\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [rehypeSlug, [rehypeAutolinkHeadings, { behavior: 'wrap' }]],\n  },\n  documentTypes: [ContentPage, ComponentPage],\n});\n", "export const siteConfig = {\n  navigation: {\n    componentGroups: [\n      'Applicaiton',\n      'Layout',\n      'Navigation',\n      'Form',\n      'Collection',\n      'Overlay',\n      'Content',\n    ],\n  },\n};\n"],
  "mappings": ";AAAA;AAAA,EACE;AAAA,EACA;AAAA,OAEK;AAEP,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;;;ACR5B,IAAM,aAAa;AAAA,EACxB,YAAY;AAAA,IACV,iBAAiB;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;ADEA,IAAM,eAA0B;AAAA,EAC9B,OAAO;AAAA,IACL,MAAM;AAAA,IACN,UAAU;AAAA,EACZ;AAAA,EACA,SAAS;AAAA,IACP,MAAM;AAAA,IACN,UAAU;AAAA,EACZ;AACF;AAIO,IAAM,cAAc,mBAAmB,OAAO;AAAA,EACnD,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,GAAG;AAAA,IACH,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,SAAO,IAAI,KAAK,cAAc,QAAQ,SAAS,EAAE;AAAA,IAC5D;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,SAAS,SAAO,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,IACrE;AAAA,EACF;AACF,EAAE;AAEK,IAAM,gBAAgB,mBAAmB,OAAO;AAAA,EACrD,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,GAAG;AAAA,IACH,OAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS,WAAW,WAAW;AAAA,MAC/B,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,SACP,IAAI,IAAI,KAAK,cAAc;AAAA,QACzB;AAAA,QACA,IAAI,KAAK,cAAc,YAAY,GAAG;AAAA,MACxC,CAAC;AAAA,IACL;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA;AAAA,MAEN,SAAS,SAAO,IAAI,KAAK,eAAe,MAAM,GAAG,EAAE,CAAC;AAAA,IACtD;AAAA,EACF;AACF,EAAE;AAIF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe,CAAC,YAAY,CAAC,wBAAwB,EAAE,UAAU,OAAO,CAAC,CAAC;AAAA,EAC5E;AAAA,EACA,eAAe,CAAC,aAAa,aAAa;AAC5C,CAAC;",
  "names": []
}
