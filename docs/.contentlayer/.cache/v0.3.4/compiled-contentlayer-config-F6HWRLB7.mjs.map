{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../lib/mdx/rehype-component-demo.tsx"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypePrettyCode, { LineElement } from 'rehype-pretty-code';\nimport rehypeSlug from 'rehype-slug';\nimport remarkGfm from 'remark-gfm';\nimport { visit } from 'unist-util-visit';\n\nimport { rehypeComponentDemo } from './lib/mdx/rehype-component-demo';\n\n/**\n * Normalizaiton supports \"grouped pages\". E.g. when we want to put\n * the page next to its demos.\n *\n * Output:\n * - concepts/layouts -> concepts/layouts\n * - components/form/button/button -> components/form/button\n */\nconst getNormalizedPath = (val: string) => {\n  let paths = val.split('/');\n\n  // Support pages that are grouped with their demos into a folder\n  if (paths.at(-1) === paths.at(-2)) {\n    paths.pop();\n  }\n\n  return paths;\n};\n\n// Page Types\n// ---------------\nexport const ContentPage = defineDocumentType(() => ({\n  name: 'ContentPage',\n  filePathPattern: '{**,*}/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n    caption: {\n      type: 'string',\n      required: true,\n    },\n    order: {\n      type: 'number',\n    },\n    badge: {\n      type: 'string',\n    },\n  },\n  computedFields: {\n    // Transforms the page's path to a slug to use with next.js API\n    slug: {\n      type: 'string',\n      resolve: doc => getNormalizedPath(doc._raw.flattenedPath).join('/'),\n    },\n    // Subsection is the 1st folder level of a page.\n    section: {\n      type: 'string',\n      resolve: doc => {\n        const path = getNormalizedPath(doc._raw.flattenedPath);\n        return path.length < 2 ? null : path.at(0);\n      },\n    },\n    // Subsection is the 2nd folder level of a page.\n    subsection: {\n      type: 'string',\n      resolve: doc => {\n        const path = getNormalizedPath(doc._raw.flattenedPath);\n        return path.length < 3 ? null : path.at(1);\n      },\n    },\n\n    /**\n     * flattened Path:\n     *\n     * - pages/concepts/layouts\n     * - components/button/button\n     * - hooks/useTheme/useTheme\n     *\n     * [ 'components', 'footer', 'footer' ] footer footer\n     */\n\n    // section: {\n    //   type: 'string',\n    //   resolve: doc => doc._raw.sourceFileDir.split('/').at(-1),\n    // },\n    // slug: {\n    //   type: 'string',\n    //   resolve: doc => doc._raw.flattenedPath.replace('pages', ''),\n    // },\n    // slugAsParams: {\n    //   type: 'string',\n    //   resolve: doc => doc._raw.flattenedPath.split('/').slice(1).join('/'),\n    // },\n  },\n}));\n\n// Config\n// ---------------\nconst contentDirPath = './content';\n\nexport default makeSource({\n  contentDirPath,\n  documentTypes: [ContentPage],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      [rehypeComponentDemo, { contentDirPath }],\n      rehypeSlug,\n      // to inject the source code and other stuff inside `pre` element props\n      // needed to copy code\n      () => tree => {\n        visit(tree, node => {\n          if (node?.type === 'element' && node?.tagName === 'pre') {\n            const [codeEl] = node.children;\n            if (codeEl.tagName !== 'code') return;\n            node.raw = codeEl.children?.[0].value;\n          }\n        });\n      },\n      [\n        rehypePrettyCode,\n        {\n          theme: 'material-theme-palenight',\n          keepBackground: false,\n          onVisitLine(node: LineElement) {\n            if (node.children.length === 0) {\n              node.children = [{ type: 'text', value: ' ' }];\n            }\n          },\n          onVisitHighlightedLine(node: LineElement) {\n            node.properties.className = [\n              ...(node.properties.className || []),\n              'bg-gray-700 px-2 py-0.5 rounded-sm',\n            ];\n          },\n          onVisitHighlightedChars(node: LineElement) {\n            node.properties.className = ['bg-gray-700 px-2 py-0.5 rounded-sm'];\n          },\n        },\n      ],\n      // needed to copy code\n      () => tree => {\n        visit(tree, node => {\n          if (node?.type === 'element' && node?.tagName === 'div') {\n            if (!('data-rehype-pretty-code-fragment' in node.properties)) {\n              return;\n            }\n            for (const child of node.children) {\n              if (child.tagName === 'pre') {\n                child.properties['raw'] = node.raw;\n              }\n            }\n          }\n        });\n      },\n      [\n        rehypeAutolinkHeadings,\n        {\n          behavior: 'wrap',\n          properties: {\n            class: [\n              'relative',\n              'no-underline',\n              'before:absolute',\n              'before:-left-6',\n              'before:inset-y-0',\n              'before:flex',\n              'before:items-center',\n              'before:text-secondary-400',\n              'before:text-2xl',\n              `hover:before:content-['#']`,\n            ].join(' '),\n          },\n        },\n      ],\n    ],\n  },\n});\n", "import fs from 'node:fs';\nimport path from 'node:path';\nimport { Node } from 'unist';\nimport { u } from 'unist-builder';\nimport { visit } from 'unist-util-visit';\n\n// Types\n// ---------------\nexport type MdxJsxAttribute =\n  | { type: 'mdxJsxAttribute'; name: string; value: string }\n  | {\n      type: 'mdxJsxAttribute';\n      name: string;\n      value: {\n        type: 'mdxJsxAttributeValueExpression';\n        value: string;\n        data: object;\n      };\n    };\n\nexport interface RehypeNode extends Node {\n  name?: string;\n  attributes?: (\n    | MdxJsxAttribute\n    // Fallback\n    | { type: string; name: string; value: unknown }\n  )[];\n  metastring?: string;\n  children?: RehypeNode[];\n}\n\nexport interface RehypeTree extends Node {\n  children: RehypeNode[];\n}\n\nexport interface VFile {\n  data: {\n    rawDocumentData: {\n      sourceFilePath: string;\n      sourceFileName: string;\n      sourceFileDir: string;\n      contentType: string;\n      flattenedPath: string;\n    };\n  };\n  messages: unknown[];\n  history: string[];\n  cwd: string;\n  value: string;\n}\n\n// Helpers\n// ---------------\nconst getJsxAttr = (node: RehypeNode, needle: string) =>\n  node.attributes?.find(\n    ({ type, name }) => type === 'mdxJsxAttribute' && name === needle\n  ) as MdxJsxAttribute;\n\n// Plugin\n// ---------------\nexport interface RehypeComponentDemoConfig {\n  contentDirPath: string;\n}\n\nexport const rehypeComponentDemo = ({\n  contentDirPath,\n}: RehypeComponentDemoConfig) => {\n  return async (tree: RehypeTree, f: any) => {\n    const file = f as VFile;\n\n    visit(tree, (node: RehypeNode) => {\n      // 1. Find our demo component component\n      if (node.name === 'ComponentDemo') {\n        // 2. Find out which demo to use\n        const demoPath = getJsxAttr(node, 'file')?.value;\n        if (!demoPath) return;\n        if (typeof demoPath !== 'string') return;\n\n        const lineHighlighting = getJsxAttr(node, 'lineHighlighting')?.value;\n        const wordHighlighting = getJsxAttr(node, 'wordHighlighting')?.value;\n\n        try {\n          // 3. Load the demo source from the file system\n          const filePath = path.join(\n            file.cwd,\n            contentDirPath,\n            file.data.rawDocumentData.sourceFileDir,\n            demoPath\n          );\n          const source = fs.readFileSync(filePath, 'utf-8');\n          const name = path.basename(demoPath, '.demo.tsx');\n\n          // 4. Add the name and source code (as string) to the component props\n          node.attributes?.push(\n            {\n              type: 'mdxJsxAttribute',\n              name: 'name',\n              value: name,\n            },\n            {\n              type: 'mdxJsxAttribute',\n              name: 'source',\n              value: source,\n            }\n          );\n\n          // 5. Render the code as children\n          node.children?.push(\n            u('element', {\n              tagName: 'pre',\n              children: [\n                u('element', {\n                  tagName: 'code',\n                  properties: {\n                    className: ['language-tsx'],\n                    metastring: `${lineHighlighting}+${wordHighlighting}`,\n                  },\n                  children: [\n                    {\n                      type: 'text',\n                      value: source,\n                    },\n                  ],\n                }),\n              ],\n            })\n          );\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    });\n  };\n};\n"],
  "mappings": "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",
  "names": ["visit", "contentDirPath", "path", "visit"]
}
