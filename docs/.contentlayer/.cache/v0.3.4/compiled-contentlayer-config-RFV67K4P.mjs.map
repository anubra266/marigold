{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../lib/mdx/rehype-component-demo.tsx"],
  "sourcesContent": ["import {\n  defineDocumentType,\n  makeSource,\n  type ComputedFields,\n  type FieldDefs,\n} from 'contentlayer/source-files';\n\nimport remarkGfm from 'remark-gfm';\nimport rehypeSlug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\n\nimport { rehypeComponentDemo } from './lib/mdx/rehype-component-demo';\n\n// Helpers\n// ---------------\nconst commonFields: FieldDefs = {\n  title: {\n    type: 'string',\n    required: true,\n  },\n  caption: {\n    type: 'string',\n    required: true,\n  },\n};\n\nconst computedFields: ComputedFields = {\n  slug: {\n    type: 'string',\n    resolve: doc => `/${doc._raw.flattenedPath}`,\n  },\n};\n\n// Page Types\n// ---------------\nexport const ContentPage = defineDocumentType(() => ({\n  name: 'ContentPage',\n  filePathPattern: 'pages/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    ...commonFields,\n    order: {\n      type: 'number',\n    },\n  },\n  computedFields: {\n    ...computedFields,\n    slugAsParams: {\n      type: 'string',\n      resolve: doc => doc._raw.flattenedPath.split('/').slice(1).join('/'),\n    },\n  },\n}));\n\nexport const ComponentPage = defineDocumentType(() => ({\n  name: 'ComponentPage',\n  filePathPattern: 'components/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    ...commonFields,\n    group: {\n      type: 'enum',\n      options: [\n        'applicaiton',\n        'collection',\n        'content',\n        'form',\n        'layout',\n        'navigation',\n        'overlay',\n      ],\n      required: true,\n    },\n  },\n  computedFields: {\n    ...computedFields,\n    slugAsParams: {\n      type: 'string',\n      // Slugs are matched agains the name of the component or rather the file name\n      resolve: doc => doc._raw.sourceFileName.split('.')[0],\n    },\n  },\n}));\n\n// Config\n// ---------------\nconst contentDirPath = './content';\n\nexport default makeSource({\n  contentDirPath,\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      [rehypeComponentDemo, { contentDirPath }],\n      rehypeSlug,\n      [rehypeAutolinkHeadings, { behavior: 'wrap' }],\n    ],\n  },\n  documentTypes: [ContentPage, ComponentPage],\n});\n", "import path from 'node:path';\nimport fs from 'node:fs';\n\nimport { Node } from 'unist';\nimport { u } from 'unist-builder';\nimport { visit } from 'unist-util-visit';\n\n// Types\n// ---------------\nexport type MdxJsxAttribute =\n  | { type: 'mdxJsxAttribute'; name: string; value: string }\n  | {\n      type: 'mdxJsxAttribute';\n      name: string;\n      value: {\n        type: 'mdxJsxAttributeValueExpression';\n        value: string;\n        data: object; // maybe it is always an { estree: Programm }\n      };\n    };\n\nexport interface RehypeNode extends Node {\n  name?: string;\n  attributes?: (\n    | MdxJsxAttribute\n    // Fallback\n    | { type: string; name: string; value: unknown }\n  )[];\n  children?: RehypeNode[];\n}\n\nexport interface RehypeTree extends Node {\n  children: RehypeNode[];\n}\n\nexport interface VFile {\n  data: {\n    rawDocumentData: {\n      sourceFilePath: string;\n      sourceFileName: string;\n      sourceFileDir: string;\n      contentType: string;\n      flattenedPath: string;\n    };\n  };\n  messages: unknown[];\n  history: string[];\n  cwd: string;\n  value: string;\n}\n\n// Helpers\n// ---------------\nconst getJsxAttr = (node: RehypeNode, needle: string) =>\n  node.attributes?.find(\n    ({ type, name }) => type === 'mdxJsxAttribute' && name === needle\n  ) as MdxJsxAttribute;\n\n// Plugin\n// ---------------\nexport interface RehypeComponentDemoConfig {\n  contentDirPath: string;\n}\n\nexport const rehypeComponentDemo = ({\n  contentDirPath,\n}: RehypeComponentDemoConfig) => {\n  return async (tree: RehypeTree, f: any) => {\n    const file = f as VFile;\n\n    visit(tree, (node: RehypeNode) => {\n      // 1. Find our demo component component\n      if (node.name === 'ComponentDemo') {\n        // 2. Find out which demo to use\n        const demoPath = getJsxAttr(node, 'file')?.value;\n\n        if (!demoPath) return;\n        if (typeof demoPath !== 'string') return;\n\n        try {\n          // 3. Load the demo source from the file system\n          const filePath = path.join(\n            file.cwd,\n            contentDirPath,\n            file.data.rawDocumentData.sourceFileDir,\n            demoPath\n          );\n          const source = fs.readFileSync(filePath, 'utf-8');\n          const name = path.basename(demoPath, '.demo.tsx');\n\n          // 4. Add the name and source code (as string) to the component props\n          node.attributes?.push(\n            {\n              type: 'mdxJsxAttribute',\n              name: 'name',\n              value: name,\n            },\n            {\n              type: 'mdxJsxAttribute',\n              name: 'source',\n              value: source,\n            }\n          );\n\n          // 5. Render the code as children\n          node.children?.push(\n            u('element', {\n              tagName: 'pre',\n              children: [\n                u('element', {\n                  tagName: 'code',\n                  properties: {\n                    className: ['language-tsx'],\n                  },\n                  children: [\n                    {\n                      type: 'text',\n                      value: source,\n                    },\n                  ],\n                }),\n              ],\n            })\n          );\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    });\n  };\n};\n"],
  "mappings": "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",
  "names": ["contentDirPath"]
}
