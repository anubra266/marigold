{
  "title": "Design Tokens",
  "caption": "Here are all design tokens for each theme listet.",
  "order": 3,
  "body": {
    "raw": "\nDesign tokens are the foundational elements of our design system, defining key aspects of our product's visual language. They enable consistency and flexibility, allowing us to maintain a unified look and feel across all user interfaces.\n\n<Message messageTitle=\"Changing Theme\" variant=\"info\">\n  Since we have two themes, the values displayed show the available tokens in\n  the currently selected theme.\n</Message>\n\n## Colors\n\nA carefully curated set of primary, secondary, and accent colors ensures our product maintains a consistent and recognizable palette.\n\nOur colors are sorted according to their use case. For example, `bg` colors\nare only for background used, `text` for text colors, `border` only for\nborders and so on.\n\n<ColorTokenTable />\n\n## Typography\n\nWith a defined font family and various font sizes and weights, our typography maintains readability and hierarchy. The consistent use of typography contributes to a polished and cohesive user experience. The `Value` corresponds to the class name from [Tailwind CSS](https://tailwindcss.com/docs/font-size).\n\nWe have tokens for:\n\n<Tabs>\n  <Tabs.Item key=\"fontSize\" title=\"Font size\">\n    <FontSizes />\n  </Tabs.Item>\n  <Tabs.Item key=\"fontWeight\" title=\"Font weight\">\n    <FontWeights />\n  </Tabs.Item>\n  <Tabs.Item key=\"fontStyle\" title=\"Font style\">\n    <FontStyle />\n  </Tabs.Item>\n  <Tabs.Item key=\"textAlign\" title=\"Text align\">\n    <TextAlign />\n  </Tabs.Item>\n</Tabs>\n\n### Headlines\n\nThe `<Headline>` component supports by default certain styles. They are listed as Tailwind class names.\n\n<Headlines />\n\n## Spacing\n\nConsistent spacing ensures harmonious layouts and enhances visual flow. The defined spacing scale helps create balanced and accessible interfaces across different screen sizes. It's used for `gap`, `padding`, `width` and `margin`.\n\n<Spacing />\n\nBesides this there are percentage values available for `width` property, which is found in form components. You can use them similar to the tokens above. Here is a list of the values: [Tailwind percentage tokens](https://tailwindcss.com/docs/width#percentage-widths)\n\n## Radius\n\nStandardized border radius contribute to a clean and modern design. These properties are applied to components, ensuring a cohesive appearance throughout our product.\n\n<BorderRadius />\n\n## Alignment\n\nConsistent alignment ensures that elements are arranged in a purposeful manner, enhancing clarity and user comprehension.\n\n<Tabs>\n  <Tabs.Item key=\"alignX\" title=\"Horizontal\">\n    <AlignmentsX />\n  </Tabs.Item>\n  <Tabs.Item key=\"alignY\" title=\"Vertical\">\n    <AlignmentsY />\n  </Tabs.Item>\n</Tabs>\n\n## Breakpoints\n\nBy defining breakpoints for different screen sizes, we achieve responsive design that adapts seamlessly to various devices and orientations.\n\n<Breakpoints />\n",
    "code": "var Component=(()=>{var w=Object.create;var a=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,z=Object.prototype.hasOwnProperty;var A=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),C=(t,n)=>{for(var i in n)a(t,i,{get:n[i],enumerable:!0})},y=(t,n,i,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of S(n))!z.call(t,r)&&r!==i&&a(t,r,{get:()=>n[r],enumerable:!(s=k(n,r))||s.enumerable});return t};var I=(t,n,i)=>(i=t!=null?w(F(t)):{},y(n||!t||!t.__esModule?a(i,\"default\",{value:t,enumerable:!0}):i,t)),j=t=>y(a({},\"__esModule\",{value:!0}),t);var v=A((W,x)=>{x.exports=_jsx_runtime});var N={};C(N,{default:()=>H,frontmatter:()=>_});var e=I(v()),_={title:\"Design Tokens\",caption:\"Here are all design tokens for each theme listet.\",order:3};function T(t){let n=Object.assign({p:\"p\",h2:\"h2\",a:\"a\",code:\"code\",h3:\"h3\"},t.components),{Message:i,ColorTokenTable:s,Tabs:r,FontSizes:l,FontWeights:c,FontStyle:d,TextAlign:f,Headlines:h,Spacing:b,BorderRadius:u,AlignmentsX:p,AlignmentsY:m,Breakpoints:g}=n;return p||o(\"AlignmentsX\",!0),m||o(\"AlignmentsY\",!0),u||o(\"BorderRadius\",!0),g||o(\"Breakpoints\",!0),s||o(\"ColorTokenTable\",!0),l||o(\"FontSizes\",!0),d||o(\"FontStyle\",!0),c||o(\"FontWeights\",!0),h||o(\"Headlines\",!0),i||o(\"Message\",!0),b||o(\"Spacing\",!0),r||o(\"Tabs\",!0),r.Item||o(\"Tabs.Item\",!0),f||o(\"TextAlign\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"Design tokens are the foundational elements of our design system, defining key aspects of our product's visual language. They enable consistency and flexibility, allowing us to maintain a unified look and feel across all user interfaces.\"}),`\n`,(0,e.jsx)(i,{messageTitle:\"Changing Theme\",variant:\"info\",children:(0,e.jsx)(n.p,{children:`Since we have two themes, the values displayed show the available tokens in\nthe currently selected theme.`})}),`\n`,(0,e.jsx)(n.h2,{id:\"colors\",children:(0,e.jsx)(n.a,{className:\"relative no-underline before:absolute before:-left-6 before:inset-y-0 before:flex before:items-center before:text-secondary-400 before:text-2xl hover:before:content-['#']\",href:\"#colors\",children:\"Colors\"})}),`\n`,(0,e.jsx)(n.p,{children:\"A carefully curated set of primary, secondary, and accent colors ensures our product maintains a consistent and recognizable palette.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Our colors are sorted according to their use case. For example, \",(0,e.jsx)(n.code,{children:\"bg\"}),` colors\nare only for background used, `,(0,e.jsx)(n.code,{children:\"text\"}),\" for text colors, \",(0,e.jsx)(n.code,{children:\"border\"}),` only for\nborders and so on.`]}),`\n`,(0,e.jsx)(s,{}),`\n`,(0,e.jsx)(n.h2,{id:\"typography\",children:(0,e.jsx)(n.a,{className:\"relative no-underline before:absolute before:-left-6 before:inset-y-0 before:flex before:items-center before:text-secondary-400 before:text-2xl hover:before:content-['#']\",href:\"#typography\",children:\"Typography\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"With a defined font family and various font sizes and weights, our typography maintains readability and hierarchy. The consistent use of typography contributes to a polished and cohesive user experience. The \",(0,e.jsx)(n.code,{children:\"Value\"}),\" corresponds to the class name from \",(0,e.jsx)(n.a,{href:\"https://tailwindcss.com/docs/font-size\",children:\"Tailwind CSS\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:\"We have tokens for:\"}),`\n`,(0,e.jsxs)(r,{children:[(0,e.jsx)(r.Item,{title:\"Font size\",children:(0,e.jsx)(l,{})},\"fontSize\"),(0,e.jsx)(r.Item,{title:\"Font weight\",children:(0,e.jsx)(c,{})},\"fontWeight\"),(0,e.jsx)(r.Item,{title:\"Font style\",children:(0,e.jsx)(d,{})},\"fontStyle\"),(0,e.jsx)(r.Item,{title:\"Text align\",children:(0,e.jsx)(f,{})},\"textAlign\")]}),`\n`,(0,e.jsx)(n.h3,{id:\"headlines\",children:(0,e.jsx)(n.a,{className:\"relative no-underline before:absolute before:-left-6 before:inset-y-0 before:flex before:items-center before:text-secondary-400 before:text-2xl hover:before:content-['#']\",href:\"#headlines\",children:\"Headlines\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.code,{children:\"<Headline>\"}),\" component supports by default certain styles. They are listed as Tailwind class names.\"]}),`\n`,(0,e.jsx)(h,{}),`\n`,(0,e.jsx)(n.h2,{id:\"spacing\",children:(0,e.jsx)(n.a,{className:\"relative no-underline before:absolute before:-left-6 before:inset-y-0 before:flex before:items-center before:text-secondary-400 before:text-2xl hover:before:content-['#']\",href:\"#spacing\",children:\"Spacing\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Consistent spacing ensures harmonious layouts and enhances visual flow. The defined spacing scale helps create balanced and accessible interfaces across different screen sizes. It's used for \",(0,e.jsx)(n.code,{children:\"gap\"}),\", \",(0,e.jsx)(n.code,{children:\"padding\"}),\", \",(0,e.jsx)(n.code,{children:\"width\"}),\" and \",(0,e.jsx)(n.code,{children:\"margin\"}),\".\"]}),`\n`,(0,e.jsx)(b,{}),`\n`,(0,e.jsxs)(n.p,{children:[\"Besides this there are percentage values available for \",(0,e.jsx)(n.code,{children:\"width\"}),\" property, which is found in form components. You can use them similar to the tokens above. Here is a list of the values: \",(0,e.jsx)(n.a,{href:\"https://tailwindcss.com/docs/width#percentage-widths\",children:\"Tailwind percentage tokens\"})]}),`\n`,(0,e.jsx)(n.h2,{id:\"radius\",children:(0,e.jsx)(n.a,{className:\"relative no-underline before:absolute before:-left-6 before:inset-y-0 before:flex before:items-center before:text-secondary-400 before:text-2xl hover:before:content-['#']\",href:\"#radius\",children:\"Radius\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Standardized border radius contribute to a clean and modern design. These properties are applied to components, ensuring a cohesive appearance throughout our product.\"}),`\n`,(0,e.jsx)(u,{}),`\n`,(0,e.jsx)(n.h2,{id:\"alignment\",children:(0,e.jsx)(n.a,{className:\"relative no-underline before:absolute before:-left-6 before:inset-y-0 before:flex before:items-center before:text-secondary-400 before:text-2xl hover:before:content-['#']\",href:\"#alignment\",children:\"Alignment\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Consistent alignment ensures that elements are arranged in a purposeful manner, enhancing clarity and user comprehension.\"}),`\n`,(0,e.jsxs)(r,{children:[(0,e.jsx)(r.Item,{title:\"Horizontal\",children:(0,e.jsx)(p,{})},\"alignX\"),(0,e.jsx)(r.Item,{title:\"Vertical\",children:(0,e.jsx)(m,{})},\"alignY\")]}),`\n`,(0,e.jsx)(n.h2,{id:\"breakpoints\",children:(0,e.jsx)(n.a,{className:\"relative no-underline before:absolute before:-left-6 before:inset-y-0 before:flex before:items-center before:text-secondary-400 before:text-2xl hover:before:content-['#']\",href:\"#breakpoints\",children:\"Breakpoints\"})}),`\n`,(0,e.jsx)(n.p,{children:\"By defining breakpoints for different screen sizes, we achieve responsive design that adapts seamlessly to various devices and orientations.\"}),`\n`,(0,e.jsx)(g,{})]})}function B(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,Object.assign({},t,{children:(0,e.jsx)(T,t)})):T(t)}var H=B;function o(t,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return j(N);})();\n;return Component;"
  },
  "_id": "introduction/design-tokens.mdx",
  "_raw": {
    "sourceFilePath": "introduction/design-tokens.mdx",
    "sourceFileName": "design-tokens.mdx",
    "sourceFileDir": "introduction",
    "contentType": "mdx",
    "flattenedPath": "introduction/design-tokens"
  },
  "type": "ContentPage",
  "slug": "introduction/design-tokens",
  "section": "introduction",
  "subsection": null
}